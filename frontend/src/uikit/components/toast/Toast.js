import './Toast.less';
import React from 'react';
import Icon from '../../components/icon/Icon';
import {space} from 'theme/_vars';
import {addPassiveElement, removePassiveElement} from '../../dom/event-handling/click-away';

const PADDING_Y = space.small_1;
const MARGIN_Y = space.small_4;

export default class Toast extends React.Component {
    /**
     *
     * @type {HTMLDivElement}
     */
    toast = null;

    /**
     *
     * @type {HTMLDivElement}
     */
    inner = null;

    removeTimer = null;

    componentDidMount() {
        const {type} = this.props;
        const stableDur = getStableDuration(type);

        this.grow();
        this.removeTimer = setTimeout(this.collapseThenRemove, stableDur);

        addPassiveElement(this.toast);
    }

    componentWillUnmount() {
        removePassiveElement(this.toast);
    }

    collapseThenRemove = () => {
        clearTimeout(this.removeTimer);
        this.removeTimer = null;

        const {type, remove} = this.props;
        const transitionDuration = getTransitionDuration(type);
        this.collapse();
        setTimeout(() => remove(), transitionDuration);
    };

    grow = () => {
        this.toast.style.height = this.inner.getBoundingClientRect().height + 'px';
        this.toast.style.padding = `${PADDING_Y}px 0`;
        this.toast.style.margin = `0 0 ${MARGIN_Y}px 0`;
        this.toast.style.opacity = 1;
    };

    collapse = () => {
        this.toast.style.height = '0px';
        this.toast.style.paddingTop = '0px';
        this.toast.style.paddingBottom = '0px';
        this.toast.style.marginBottom = '0px';
        this.toast.style.opacity = 0;
    };

    render() {
        const {type, children} = this.props;
        const transitionDuration = getTransitionDuration(type);

        return <div
            className={['Toast', `toast-${type}`]}
            style={{
                boxSizing: 'content-box',
                height: 0,
                opacity: 0,
                margin: 0,
                padding: 0,
                transition: `all ${transitionDuration}ms`,
            }}
            ref={el => this.toast = el}
        >
            <div
                className="inner"
                ref={el => this.inner = el}
            >
                <div className="ic-holder">
                    <Icon name={getIconName(type)}/>
                </div>
                <div className="message">
                    {children}
                </div>
                {
                    type === TOAST_ERROR &&
                    <button
                        type="button"
                        className="remove-button"
                        onClick={() => this.collapseThenRemove()}
                    >
                        <Icon name="times"/>
                    </button>
                }
            </div>
        </div>;
    }
}

function getIconName(type) {
    switch (type) {
        case TOAST_SUCCESS:
            return 'tick';
        case TOAST_INFO:
            return 'info-circle';
        case TOAST_ERROR:
        case TOAST_WARN:
            return 'caution-circle';
    }
}

function getStableDuration(type) {
    switch (type) {
        case TOAST_SUCCESS:
        case TOAST_INFO:
            return 4000;
        case TOAST_WARN:
            return 6000;
        case TOAST_ERROR:
            return 30000;
    }
}

function getTransitionDuration(type) {
    return 300;
}

const TOAST_SUCCESS = 'success';
const TOAST_ERROR = 'error';
const TOAST_WARN = 'warn';
const TOAST_INFO = 'info';

export {
    TOAST_SUCCESS,
    TOAST_ERROR,
    TOAST_WARN,
    TOAST_INFO,
};

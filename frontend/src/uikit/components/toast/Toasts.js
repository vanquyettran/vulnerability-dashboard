import './Toasts.less';
import React from 'react';
import ReactDOM from 'react-dom';
import Toast, {TOAST_SUCCESS, TOAST_INFO, TOAST_ERROR, TOAST_WARN} from './Toast';

let instance = null;
let autoIncId = 0;

class Toasts extends React.Component {
    constructor(props) {
        super(props);

        this.state = {
            toasts: [],
        };

        instance = this;
    }

    add = (type, message) => {
        const {toasts} = this.state;

        const id = ++autoIncId;

        toasts.push({id, type, message});

        this.forceUpdate();
    };

    remove = (id) => {
        const {toasts} = this.state;

        let index = toasts.findIndex(t => id === t.id);
        if (index > -1) {
            toasts.splice(index, 1);
        }

        this.forceUpdate();
    };

    render() {
        const {toasts} = this.state;

        if (toasts.length === 0) {
            return null;
        }

        return <div className="Toasts">
            {
                toasts.map(({id, type, message}) => {
                    return <Toast
                        key={id}
                        type={type}
                        remove={() => this.remove(id)}
                    >
                        {message}
                    </Toast>;
                })
            }
        </div>;
    }
}

export default {
    init() {
        const container = document.createElement('div');
        container.className = 'ToastsContainer';
        document.body.appendChild(container);
        ReactDOM.render(<Toasts/>, container);
    },
    add(type, message) {
        if (instance !== null) {
            instance.add(type, message);
            return;
        }

        this.init();
        setTimeout(() => {
            instance.add(type, message);
        });
    },
};

export {
    TOAST_SUCCESS,
    TOAST_INFO,
    TOAST_ERROR,
    TOAST_WARN,
};

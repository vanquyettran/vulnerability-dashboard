import './Button.less';
import React, {forwardRef, ReactNode, Ref} from 'react';
import Icon, {IconProps} from '../icon/Icon';

export interface ButtonProps {
    title: string,
    type?: 'button' | 'submit' | 'link',
    onClick?: (ev: MouseEvent) => void,
    appearance?: (
        | 'solid-primary'
        | 'solid-accent'
        | 'solid-neutral'
        | 'solid-success'
        | 'solid-danger'
        | 'solid-caution'
        | 'solid-info'
        | 'text-primary'
        | 'text-accent'
        | 'text-neutral'
        | 'text-success'
        | 'text-danger'
        | 'text-caution'
        | 'text-info'
        | 'outline-primary'
        | 'outline-accent'
        | 'outline-neutral'
        | 'outline-success'
        | 'outline-danger'
        | 'outline-caution'
        | 'outline-info'
        ),
    size?: 'small' | 'medium' | 'large',
    disabled?: boolean,
    readOnly?: boolean,
    icon?: IconProps['name'] | ReactNode,
    iconPosition?: 'start' | 'end',
    href?: string,
    linkTarget?: string,
    linkRel?: string,
}

export default forwardRef(function Button(
    {
        title,
        type = 'button',
        onClick = () => undefined,
        appearance = 'solid-primary',
        size = 'medium',
        disabled = false,
        readOnly = false,
        icon,
        iconPosition = 'start',
        href,
        linkTarget,
        linkRel,
    }: ButtonProps,
    ref?: Ref<HTMLButtonElement | HTMLAnchorElement>,
) {

    const handleClick = (ev: MouseEvent) => {
        if (disabled || readOnly) {
            ev.preventDefault();
            return;
        }

        onClick(ev);
    };

    const iconComponent = typeof icon === 'string'
        ? <Icon name={icon as IconProps['name']}/>
        : (React.isValidElement(icon) ? icon : null);

    const appearanceBase = appearance.split('-')[0];

    return <RefTag
        ref={ref}
        type={type}
        // @ts-ignore
        className={[
            'Button',
            `appearance-${appearanceBase}`,
            `appearance-${appearance}`,
            `size-${size}`,
            disabled && 'disabled',
            readOnly && 'read-only',
        ]}
        onClick={handleClick}
        href={href}
        linkTarget={linkTarget}
        linkRel={linkRel}
    >
        <span>
            {
                icon !== null &&
                iconPosition === 'start' &&
                iconComponent
            }
            <span>{title}</span>
            {
                icon !== null &&
                iconPosition === 'end' &&
                iconComponent
            }
        </span>
    </RefTag>;
});

const RefTag = forwardRef(function Tag(
    {
        children,
        type,
        href,
        linkTarget,
        linkRel,
        ...rest
    }: {
        children: ReactNode,
        type: 'button' | 'submit' | 'link',
        href?: string,
        linkTarget?: string,
        linkRel?: string,
    },
    ref: Ref<HTMLButtonElement | HTMLAnchorElement>,
) {
    if (type === 'link') {
        return <a
            {...rest}
            href={href}
            target={linkTarget}
            rel={linkRel}
            ref={ref as Ref<HTMLAnchorElement>}
        >
            {children}
        </a>;
    }

    return <button
        {...rest}
        type={type}
        ref={ref as Ref<HTMLButtonElement>}
    >
        {children}
    </button>;
});

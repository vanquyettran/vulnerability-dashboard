import './Button.less';
import React, {forwardRef, ReactNode, Ref} from 'react';
import Icon from '../icon/Icon';

export default forwardRef(function Button({
    title,
    type = 'button', // button, submit, link
    onClick = () => undefined,
    appearance = 'solid-primary',
    size = 'medium', // small, medium, large
    disabled = false,
    readOnly = false,
    icon,
    iconPosition = 'start', // start, end
    href,
    linkTarget,
    linkRel,
} : {
    title: string,
    type?: 'button' | 'submit' | 'link',
    onClick?: (ev: MouseEvent) => void,
    appearance?: string,
    size?: string,
    disabled?: boolean,
    readOnly?: boolean,
    icon?: string | ReactNode,
    iconPosition?: string,
    href?: string,
    linkTarget?: string,
    linkRel?: string,
}, ref?: Ref<HTMLButtonElement | HTMLAnchorElement>) {

    const handleClick = (ev: MouseEvent) => {
        if (disabled || readOnly) {
            ev.preventDefault();
            return;
        }

        onClick(ev);
    };

    const iconComponent = typeof icon === 'string'
        ? <Icon name={icon}/>
        : (React.isValidElement(icon) ? icon : null);

    const appearanceBase = appearance.split('-')[0];

    return <RefTag
        ref={ref}
        type={type}
        // @ts-ignore
        className={[
            'Button',
            `appearance-${appearanceBase}`,
            `appearance-${appearance}`,
            `size-${size}`,
            disabled && 'disabled',
            readOnly && 'read-only',
        ]}
        onClick={handleClick}
        href={href}
        linkTarget={linkTarget}
        linkRel={linkRel}
    >
        <span>
            {
                icon !== null &&
                iconPosition === 'start' &&
                iconComponent
            }
            <span>{title}</span>
            {
                icon !== null &&
                iconPosition === 'end' &&
                iconComponent
            }
        </span>
    </RefTag>;
});

const RefTag = forwardRef(function Tag(
    {
        children,
        type,
        href,
        linkTarget,
        linkRel,
        ...rest
    } : {
        children: ReactNode,
        type: 'button' | 'submit' | 'link',
        href?: string,
        linkTarget?: string,
        linkRel?: string,
    },
    ref: Ref<HTMLButtonElement | HTMLAnchorElement>
) {
    if (type === 'link') {
        return <a
            {...rest}
            href={href}
            target={linkTarget}
            rel={linkRel}
            ref={ref as Ref<HTMLAnchorElement>}
        >
            {children}
        </a>;
    }

    return <button
        {...rest}
        type={type}
        ref={ref as Ref<HTMLButtonElement>}
    >
        {children}
    </button>;
});

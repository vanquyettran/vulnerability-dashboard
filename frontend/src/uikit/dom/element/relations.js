const relationsDictionary = {};

/**
 *
 * @param {string} relationName
 * @return {Map}
 */
function getOrCreateRelationsByName(relationName) {
    if (!relationsDictionary.hasOwnProperty(relationName)) {
        relationsDictionary[relationName] = new Map();
    }

    return relationsDictionary[relationName];
}

/**
 *
 * @param relationName
 * @param host
 * @return {Array}
 */
function getOrCreateRelatedElements(relationName, host) {
    const relations = getOrCreateRelationsByName(relationName);

    if (!relations.has(host)) {
        relations.set(host, []);
    }

    return relations.get(host);
}

/**
 *
 * @param {string} relationName
 * @return {Map|null}
 */
function getRelationsByName(relationName) {
    if (!relationsDictionary.hasOwnProperty(relationName)) {
        return null;
    }

    return relationsDictionary[relationName];
}

/**
 *
 * @param relationName
 * @param host
 * @return {Array|null}
 */
function getRelatedElements(relationName, host) {
    const relations = getRelationsByName(relationName);

    if (relations === null || !relations.has(host)) {
        return null;
    }

    return relations.get(host);
}


function addRelationBetweenElements(relationName, host, client) {
    const clients = getOrCreateRelatedElements(relationName, host);

    if (!clients.includes(client)) {
        clients.push(client);
    }
}

function removeRelationBetweenElements(relationName, host, client) {
    const clients = getOrCreateRelatedElements(relationName, host);

    const index = clients.indexOf(client);

    if (index >= 0) {
        clients.splice(index, 1);
    }
}

function removeAllRelationsWithClientElements(relationName, host) {
    getClientElementsInRelation(relationName, host).forEach(client => {
        removeRelationBetweenElements(relationName, host, client);
    });
}

function getClientElementsInRelation(relationName, host) {
    return getRelatedElements(relationName, host) || [];
}

function getHostElementsInRelation(relationName, client) {
    const relations = getRelationsByName(relationName);

    if (relations === null) {
        return [];
    }

    const hosts = [];

    relations.forEach((clients, host) => {
        if (clients.includes(client)) {
            hosts.push(host);
        }
    });

    return hosts;
}

export {
    addRelationBetweenElements,
    removeRelationBetweenElements,
    removeAllRelationsWithClientElements,
    getClientElementsInRelation,
    getHostElementsInRelation
};


export const RELATION_ADOPTED_CHILD = 'adopted_child';

export const RELATION_DROPDOWN_ANCHOR = 'dropdown_anchor';

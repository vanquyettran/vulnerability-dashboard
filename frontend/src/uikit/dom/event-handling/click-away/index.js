import {getClientElementsInRelation, RELATION_ADOPTED_CHILD} from '../../element/relations';


const STORE = new Map();

const PASSIVE_ELEMENTS = new Set();

function addPassiveElement(el) {
    if (!PASSIVE_ELEMENTS.has(el)) {
        PASSIVE_ELEMENTS.add(el);
    }
}

function removePassiveElement(el) {
    if (PASSIVE_ELEMENTS.has(el)) {
        PASSIVE_ELEMENTS.delete(el);
    }
}

/**
 *
 * @param id {any}
 * @param boxes {Array<HTMLElement>}
 * @param close {function}
 */
function setClickAwayListener(id, boxes, close) {
    if (typeof close === 'function' &&
        boxes.every(el => el instanceof Node)
    ) {
        STORE.set(id, [boxes, close]);
    } else {
        console.error(`Unable to set listener ${id}: Invalid arguments`);
    }
}

/**
 *
 * @param id {any}
 */
function unsetClickAwayListener(id) {
    delete STORE.delete(id);
}

function handleClickAway(event, boxes, close) {
    if (!document.body.contains(event.target)) {
        return;
    }

    if (boxes.some(box =>
        equalOrContains(box, event.target)
        ||
        Array.from(PASSIVE_ELEMENTS).some(passiveEl =>
            equalOrContains(passiveEl, event.target)
        )
        ||
        getAllAdoptedChildren(box).some(adoptedChild =>
            equalOrContains(adoptedChild, event.target)
        )
    )) {
        return;
    }

    close();
}

function equalOrContains(el1, el2) {
    return el1 === el2 || el1.contains(el2);
}

function getAllAdoptedChildren(el) {
    const adoptedChildren = getClientElementsInRelation(RELATION_ADOPTED_CHILD, el);

    [].forEach.call(el.children, child => {
        adoptedChildren.push(...getAllAdoptedChildren(child));
    });

    return adoptedChildren;
}

document.addEventListener('mousedown', function (event) {
    STORE.forEach((value) => {
        handleClickAway(event, ...value);
    });
});


export {
    setClickAwayListener,
    unsetClickAwayListener,
    addPassiveElement,
    removePassiveElement,
}

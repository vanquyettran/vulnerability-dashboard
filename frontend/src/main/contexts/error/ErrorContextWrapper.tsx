import React, {ReactNode, useState} from 'react';
import ErrorContext, {ErrorContextValue} from './ErrorContext';

export default function ErrorContextWrapper({children}: {children: ReactNode}) {
    const [error, setError] = useState<ErrorContextValue['error']>(null);

    const setErrorByHttpCode = (httpCode: number | null) => {
        console.log({httpCode});
        switch (httpCode) {
            case 0:
                setError('ConnectionFailed');
                break;
            case 403:
                setError('Forbidden');
                break;
            case 404:
                setError('NotFound');
                break;
            default:
                setError('Unexpected');
        }
    };

    const contextValue = {
        error,
        setError,
        setErrorByHttpCode,
    };

    return <ErrorContext.Provider value={contextValue}>
        {children}
    </ErrorContext.Provider>;
}

import {useSetRecoilState} from 'recoil';
import {cardData} from '../__internals/atoms';
import {CardDataManipulation, CardMove} from 'main/store/interfaces';
import useAjaxList from '../__internals/ajax-actions/useAjaxList';
import useAjaxRead from '../__internals/ajax-actions/useAjaxRead';
import useAjaxCreate from '../__internals/ajax-actions/useAjaxCreate';
import useAjaxUpdate from '../__internals/ajax-actions/useAjaxUpdate';
import useAjaxBackgroundUpdate from '../__internals/ajax-actions/useAjaxBackgroundUpdate';
import useAjaxDelete from '../__internals/ajax-actions/useAjaxDelete';
import manipulateData from '../__internals/manipulateData';
import useAjaxBackgroundMove from 'main/store/card/ajax-actions/useAjaxBackgroundMove';

export default function useCardActions(): CardDataManipulation {
    const {addOrReplace, update, removeById, setData} = manipulateData(useSetRecoilState(cardData));

    const updateAndMove: CardMove = ({cardId, fromList, toList, toPosInList, timestamp}, callback) => {
        setData(data => {
            if (!(cardId in data.byId)) {
                if (callback !== undefined) {
                    callback(null);
                }
                return data;
            }
            const allCards = data.allIds.map(id => data.byId[id]);

            // Fallback
            const fallbackCard = data.byId[cardId];
            const fallbackCardsInList = allCards.filter(t => t.listId === fallbackCard.listId);
            const fallbackPosInList = fallbackCardsInList.map(t => t.id).indexOf(cardId);

            // Card
            const card = {
                ...fallbackCard,
                listId: toList.id,
                activityLog: [...fallbackCard.activityLog],
            };

            // Add a log if the card was move to another list
            if (fromList.id !== toList.id) {
                card.activityLog.push({
                    type: 'Move',
                    fromListTitle: fromList.title,
                    toListTitle: toList.title,
                    timestamp,
                });
            }

            // Global positions
            const sourceGlobalPos = data.allIds.indexOf(card.id);
            const destGlobalPosIfSameList = (() => {
                const cardsInList = allCards.filter(t => t.listId === card.listId);

                if (cardsInList.length === 0) {
                    return 0;
                }

                if (toPosInList < 0) {
                    const firstCardInList = cardsInList[0];
                    return data.allIds.indexOf(firstCardInList.id);
                }

                if (toPosInList > cardsInList.length - 1) {
                    const lastCardInList = cardsInList[cardsInList.length - 1];
                    return data.allIds.indexOf(lastCardInList.id) + 1;
                }

                {
                    const refCardInList = cardsInList[toPosInList];
                    return data.allIds.indexOf(refCardInList.id);
                }
            })();
            const destGlobalPos = (() => {
                if (fallbackCard.listId === card.listId) {
                    return destGlobalPosIfSameList;
                }

                // Moving left will not affect the order like in the same list
                if (sourceGlobalPos >= destGlobalPosIfSameList) {
                    return destGlobalPosIfSameList;
                }

                // If not in the same list and move right then
                // all indexes after the source index will be decreased 1
                return destGlobalPosIfSameList - 1;
            })();

            // Reorder
            const reorderedIds = Array.from(data.allIds);
            const [removed] = reorderedIds.splice(sourceGlobalPos, 1);
            reorderedIds.splice(destGlobalPos, 0, removed);

            if (callback !== undefined) {
                callback({
                    cardId,
                    fromList: toList,
                    toList: fromList,
                    toPosInList: fallbackPosInList,
                    timestamp,
                });
            }

            return {
                byId: {
                    ...data.byId,
                    [card.id]: card,
                },
                allIds: reorderedIds,
            };
        });
    };

    return {
        ajaxList: useAjaxList(addOrReplace),
        ajaxRead: useAjaxRead(addOrReplace),
        ajaxCreate: useAjaxCreate(addOrReplace),
        ajaxUpdate: useAjaxUpdate(update),
        ajaxBackgroundUpdate: useAjaxBackgroundUpdate(update),
        ajaxDelete: useAjaxDelete(removeById),
        ajaxBackgroundMove: useAjaxBackgroundMove(updateAndMove),
    };
}

import {
    AjaxAction,
    AjaxState,
    CardDataManipulation,
    CardMove,
    CardMoveParams,
    EntityDataManipulationInternal,
} from 'main/store/interfaces';
import {useState} from 'react';
import ResponseError from 'libs/http-request/ResponseError';
import __ from 'main/i18n';
import Request from 'libs/http-request/Request';
import ICard from 'main/models/interfaces/ICard';

export default function useAjaxBackgroundMove(
    move: CardMove,
    update: EntityDataManipulationInternal<ICard>['update']
): AjaxAction<CardMoveParams> {
    const [state, setState] = useState<AjaxState>({inProgress: false, error: null});

    const run: CardDataManipulation['ajaxBackgroundMove']['run'] = (parcel) => {
        if (state.inProgress) {
            return Promise.reject(new ResponseError(__('The process is running')));
        }

        const draftData = parcel.getExpectedResponseData();
        if (draftData === null) {
            return Promise.reject(new ResponseError(__('No expected response data')));
        }

        return new Promise((resolve, reject) => {
            move(draftData, (card, fallback) => {
                if (card === null) {
                    return reject(new ResponseError(__('Entity not found with ID ::id', {id: draftData.cardId})));
                }

                setState({inProgress: true, error: null});

                Request.add(parcel)
                    .then((moveParams) => {
                        setState({inProgress: false, error: null});

                        // Write log only when moving to a different list
                        if (moveParams.fromList.id !== moveParams.toList.id) {
                            update({
                                ...card,
                                activityLog: [
                                    ...card.activityLog,
                                    {
                                        type: 'Move',
                                        fromListTitle: moveParams.fromList.title,
                                        toListTitle: moveParams.toList.title,
                                        timestamp: moveParams.timestamp,
                                    }
                                ]
                            }, () => {
                                resolve(moveParams);
                            });
                        } else {
                            resolve(moveParams);
                        }
                    })
                    .catch(error => {
                        setState({inProgress: false, error: error});
                        move(fallback);
                        reject(error);
                    });
            });
        });
    };

    return {run, state};
}

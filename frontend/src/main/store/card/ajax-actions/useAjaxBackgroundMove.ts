import {
    AjaxAction,
    AjaxState,
    CardDataManipulation,
    CardMove,
    CardMoveParams,
} from 'main/store/interfaces';
import {useState} from 'react';
import ResponseError from 'libs/http-request/ResponseError';
import __ from 'main/i18n';
import Request from 'libs/http-request/Request';

export default function useAjaxBackgroundMove(updateAndReorder: CardMove): AjaxAction<CardMoveParams> {
    const [state, setState] = useState<AjaxState>({inProgress: false, error: null});

    const run: CardDataManipulation['ajaxBackgroundMove']['run'] = (parcel) => {
        if (state.inProgress) {
            return Promise.reject(new ResponseError(__('The process is running')));
        }

        const draftData = parcel.getExpectedResponseData();
        if (draftData === null) {
            return Promise.reject(new ResponseError(__('No expected response data')));
        }

        return new Promise((resolve, reject) => {
            updateAndReorder(draftData, (fallback) => {
                if (fallback === null) {
                    return reject(new ResponseError(__('Entity not found with ID ::id', {id: draftData.cardId})));
                }

                setState({inProgress: true, error: null});

                Request.add(parcel)
                    .then((entity) => {
                        setState({inProgress: false, error: null});
                        resolve(entity);
                    })
                    .catch(error => {
                        setState({inProgress: false, error: error});
                        updateAndReorder(fallback);
                        reject(error);
                    });
            });
        });
    };

    return {run, state};
}

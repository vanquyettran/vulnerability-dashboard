import {useState} from 'react';
import {IEntityData, IEntityStore} from './interfaces';
import IEntity from 'main/interfaces/IEntity';

export default function useEntityStore<T extends IEntity>(): IEntityStore<T> {
    const [data, setData] = useState<IEntityData<T>>({byId: {}, allIds: []});

    const add = (...entities: T[]) => {
        setData(data => {
            const _byId: typeof data.byId = {};
            const _allIds: typeof data.allIds = [];

            for (let entity of entities) {
                if (!(entity.id in data.byId)) {
                    _byId[entity.id] = entity;
                    _allIds.push(entity.id);
                }
            }

            if (_allIds.length === 0) {
                return data;
            }

            return {
                byId: {...data.byId, ..._byId},
                allIds: [...data.allIds, ..._allIds]
            };
        });
    };

    const remove = (entityId: T['id']) => {
        setData(data => {
            if (!(entityId in data.byId)) {
                return data;
            }

            const {[entityId]: _, ...newById} = data.byId;
            const newAllIds = data.allIds.filter(id => id !== entityId);

            return {
                byId: newById,
                allIds: newAllIds
            };
        });
    };

    const update = (entity: T) => {
        setData(data => {
            if (!(entity.id in data.byId)) {
                return data;
            }

            return {
                byId: {
                    ...data.byId,
                    [entity.id]: entity,
                },
                allIds: data.allIds
            };
        });
    };

    return {
        data,
        add,
        remove,
        update,
    };
}

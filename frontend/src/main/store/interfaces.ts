import Entity from 'main/models/interfaces/Entity';
import Repo from 'main/models/interfaces/Repo';
import List from 'main/models/interfaces/List';
import Card from 'main/models/interfaces/Card';
import Parcel from 'libs/http-request/Parcel';
import ResponseError from 'libs/http-request/ResponseError';

export interface EntityDataSource<T extends Entity> {
    byId: {[key: string]: T},
    allIds: T['id'][]
}

export interface RepoDataSource extends EntityDataSource<Repo> {
}

export interface ListDataSource extends EntityDataSource<List> {
}

export interface CardDataSource extends EntityDataSource<Card> {
}

export interface AjaxState {
    inProgress: boolean,
    error: ResponseError | null,
}

export interface AjaxAction<P> {
    run: (parcel: Parcel<P>) => Promise<P>,
    state: AjaxState,
}

export interface EntityData<T extends Entity> {
    entities: T[],
    allIds: T['id'][],
    findById: (id: T['id']) => T | undefined,
}

export interface EntityDataManipulationInternal<T extends Entity> {
    addOrReplace: (...entities: T[]) => void,
    update: (entity: T, callback?: (replacedEntity: T | null, dataSource: EntityDataSource<T>) => void) => void,
    removeById: (entityId: T['id']) => void,
    reorder: (entityId: T['id'], newPosition: number) => void,
}

export interface EntityDataManipulation<T extends Entity> {
    ajaxList: AjaxAction<T[]>,
    ajaxRead: AjaxAction<T>,
    ajaxCreate: AjaxAction<T>,
    ajaxDelete: AjaxAction<T>,
    ajaxUpdate: AjaxAction<T>,
    ajaxDraftUpdate: AjaxAction<T>,
}

export interface RepoData extends EntityData<Repo> {
}

export interface ListData extends EntityData<List> {
}

export interface CardData extends EntityData<Card> {
}

export interface RepoDataManipulation extends EntityDataManipulation<Repo> {
}

export interface ListDataManipulation extends EntityDataManipulation<List> {
}

export interface CardDataManipulation extends EntityDataManipulation<Card> {
    ajaxDraftMigrate: AjaxAction<{card: Card, posInList: number}>,
}

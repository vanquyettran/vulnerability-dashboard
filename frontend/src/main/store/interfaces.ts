import IEntity from 'main/models/interfaces/IEntity';
import IRepo from 'main/models/interfaces/IRepo';
import IList from 'main/models/interfaces/IList';
import ICard from 'main/models/interfaces/ICard';
import Parcel from 'libs/http-request/Parcel';
import ResponseError from 'libs/http-request/ResponseError';
import {Dispatch, SetStateAction} from 'react';

export interface EntityDataSource<T extends IEntity> {
    byId: {[key: string]: T},
    allIds: T['id'][],
}

export interface RepoDataSource extends EntityDataSource<IRepo> {
}

export interface ListDataSource extends EntityDataSource<IList> {
}

export interface CardDataSource extends EntityDataSource<ICard> {
}

export interface AjaxState {
    inProgress: boolean,
    error: ResponseError | null,
}

export interface AjaxAction<P> {
    run: (parcel: Parcel<P>) => Promise<P>,
    state: AjaxState,
}

export interface EntityData<T extends IEntity> {
    entities: T[],
    allIds: T['id'][],
    findById: (id: T['id']) => T | undefined,
}

export interface EntityDataManipulationInternal<T extends IEntity> {
    addOrReplace: (...entities: T[]) => void,
    update: (entity: T, callback?: (fallback: T | null) => void) => void,
    removeById: (entityId: T['id']) => void,
    setData: Dispatch<SetStateAction<EntityDataSource<T>>>,
}

export interface EntityDataManipulation<T extends IEntity> {
    ajaxList: AjaxAction<T[]>,
    ajaxRead: AjaxAction<T>,
    ajaxCreate: AjaxAction<T>,
    ajaxDelete: AjaxAction<T>,
    ajaxUpdate: AjaxAction<T>,
    ajaxBackgroundUpdate: AjaxAction<T>,
}

export interface RepoData extends EntityData<IRepo> {
}

export interface ListData extends EntityData<IList> {
}

export interface CardData extends EntityData<ICard> {
}

export interface RepoDataManipulation extends EntityDataManipulation<IRepo> {
}

export interface ListDataManipulation extends EntityDataManipulation<IList> {
}

export interface CardMoveParams {
    cardId: ICard['id'],
    fromList: IList,
    toList: IList,
    toPosInList: number,
    timestamp: string,
}

export type CardMove = (
    draftData: CardMoveParams,
    callback?: (fallback: CardMoveParams | null) => void,
) => void;

export interface CardDataManipulation extends EntityDataManipulation<ICard> {
    ajaxBackgroundMove: AjaxAction<CardMoveParams>,
}

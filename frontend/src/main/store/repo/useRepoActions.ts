import {useSetRecoilState} from 'recoil';
import {repoData} from '../__internals/atoms';
import {RepoDataManipulation} from '../interfaces';
import createDraftList from 'main/models/factory/createDraftList';
import ListCreateParcel from 'main/api/list/ListCreateParcel';
import useListActions from 'main/store/list/useListActions';
import useAjaxCreate from '../__internals/ajax-actions/useAjaxCreate';
import useAjaxList from '../__internals/ajax-actions/useAjaxList';
import useAjaxRead from '../__internals/ajax-actions/useAjaxRead';
import useAjaxUpdate from '../__internals/ajax-actions/useAjaxUpdate';
import useAjaxDraftUpdate from '../__internals/ajax-actions/useAjaxDraftUpdate';
import useAjaxDelete from '../__internals/ajax-actions/useAjaxDelete';
import manipulateData from '../__internals/manipulateData';
import IList from 'main/models/interfaces/IList';

export default function useRepoActions(): RepoDataManipulation {
    const {addOrReplace, update, removeById} = manipulateData(useSetRecoilState(repoData));
    const listActions = useListActions();

    return {
        ajaxList: useAjaxList(addOrReplace),
        ajaxRead: useAjaxRead(addOrReplace),
        ajaxCreate: useAjaxCreate(addOrReplace, (createdRepo, callback) => {
            const draftLists = ([
                'Open',
                'Confirmed',
                'False Positive',
                'Fixed',
            ] as IList['title'][]).map((title) => createDraftList({title}));

            // Create lists sequentially:
            // to maintain the order
            // and AjaxAction does not support parallel running
            const promise = draftLists.reduce((promise, list) => {
                return promise.finally(() => {
                    return listActions.ajaxCreate.run(new ListCreateParcel(createdRepo.id, list));
                });
            }, Promise.resolve());

            promise.finally(callback);
        }),
        ajaxUpdate: useAjaxUpdate(update),
        ajaxDraftUpdate: useAjaxDraftUpdate(update),
        ajaxDelete: useAjaxDelete(removeById, (deletedRepo, callback) => {
            // TODO: Implement DELETE CASCADE
            callback();
        }),
    };
}

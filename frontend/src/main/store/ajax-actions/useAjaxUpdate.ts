import {useState} from 'react';
import Entity from 'main/models/interfaces/Entity';
import {AjaxAction, AjaxState, EntityDataManipulation, EntityDataManipulationInternal} from 'main/store/interfaces';
import ResponseError from 'libs/http-request/ResponseError';
import __ from 'main/i18n';
import Request from 'libs/http-request/Request';

export default function useAjaxUpdate<T extends Entity>(
    update: EntityDataManipulationInternal<T>['update']
): AjaxAction<T> {
    const [state, setState] = useState<AjaxState>({inProgress: false, error: null});

    const run: EntityDataManipulation<T>['ajaxUpdate']['run'] = (parcel) => {
        if (state.inProgress) {
            return Promise.reject(new ResponseError(__('The process is running')));
        }

        setState({inProgress: true, error: null});

        return new Promise((resolve, reject) => {
            Request.add(parcel)
                .then((entity) => {
                    setState({inProgress: false, error: null});
                    update(entity);
                    resolve(entity);
                })
                .catch(error => {
                    setState({inProgress: false, error: error});
                    reject(error);
                });
        });
    };

    return {run, state};
}

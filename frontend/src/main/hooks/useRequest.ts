import {useEffect, useState} from 'react';
import Parcel from 'libs/http-request/Parcel';
import ResponseError from 'libs/http-request/ResponseError';
import Request from 'libs/http-request/Request';


export default function useRequest<T>(
    parcel: Parcel<T>,
    {
        manual = false,
        onSuccess = () => undefined,
        onError = () => undefined,
    }: {
        manual?: boolean,
        onSuccess?: (data: T) => void,
        onError?: (error: ResponseError) => void,
    } = {}
): {
    data: T | null,
    error: ResponseError | null,
    inProgress: boolean,
    run: () => void,
} {
    const [data, setData] = useState<T | null>(null);

    const [[inProgress, error], setLoadingState] = useState<[boolean, ResponseError | null]>([false, null]);

    const [runningCount, setRunningCount] = useState(0);

    useEffect(() => {
        if (manual && runningCount === 0) {
            return;
        }

        setLoadingState([true, null]);

        Request.add(parcel)
            .then(data => {
                setData(data);
                setLoadingState([false, null]);
                onSuccess(data);
            })
            .catch(error => {
                setLoadingState([false, error]);
                onError(error);
            });

        return () => {
            Request.destroy(parcel);
        };
    }, [manual, runningCount]);

    const run = () => {
        setRunningCount(t => t + 1);
    };

    return {
        data,
        inProgress,
        error,
        run,
    };
}

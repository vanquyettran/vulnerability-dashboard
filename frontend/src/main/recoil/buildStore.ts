import {Dispatch, SetStateAction, useState} from 'react';
import {AjaxState, IEntityData, IEntityStore, IRepoStore} from './interfaces';
import IEntity from 'main/interfaces/IEntity';
import Request from 'libs/http-request/Request';

export default function buildStore<T extends IEntity>(
    [data, setData]: [IEntityData<T>, Dispatch<SetStateAction<IEntityData<T>>>]
): IEntityStore<T> {

    const add = (...entities: T[]) => {
        setData(data => {
            const _byId: typeof data.byId = {};
            const _allIds: typeof data.allIds = [];

            for (let entity of entities) {
                if (!(entity.id in data.byId)) {
                    _byId[entity.id] = entity;
                    _allIds.push(entity.id);
                }
            }

            if (_allIds.length === 0) {
                return data;
            }

            return {
                byId: {...data.byId, ..._byId},
                allIds: [...data.allIds, ..._allIds]
            };
        });
    };

    const removeById = (entityId: T['id']) => {
        setData(data => {
            if (!(entityId in data.byId)) {
                return data;
            }

            const {[entityId]: _, ...newById} = data.byId;
            const newAllIds = data.allIds.filter(id => id !== entityId);

            return {
                byId: newById,
                allIds: newAllIds
            };
        });
    };

    const update = (entity: T) => {
        setData(data => {
            if (!(entity.id in data.byId)) {
                return data;
            }

            return {
                byId: {
                    ...data.byId,
                    [entity.id]: entity,
                },
                allIds: data.allIds
            };
        });
    };

    const [ajaxBulkAddingState, setAjaxBulkAddingState] = useState<AjaxState>({inProgress: false, error: null});

    const [ajaxAddingState, setAjaxAddingState] = useState<AjaxState>({inProgress: false, error: null});

    const [ajaxRemovingState, setAjaxRemovingState] = useState<AjaxState>({inProgress: false, error: null});

    const [ajaxUpdatingState, setAjaxUpdatingState] = useState<AjaxState>({inProgress: false, error: null});

    const ajaxBulkAdd: IEntityStore<T>['ajaxBulkAdd']['run'] = (parcel, onSuccess, onError) => {
        setAjaxBulkAddingState({inProgress: true, error: null});

        Request.add(parcel)
            .then(entities => {
                add(...entities);
                setAjaxBulkAddingState({inProgress: false, error: null});
                if (onSuccess) {
                    onSuccess(entities);
                }
            })
            .catch(error => {
                setAjaxBulkAddingState({inProgress: false, error: error});
                if (onError) {
                    onError(error);
                }
            });

        return parcel;
    };

    const ajaxAdd: IEntityStore<T>['ajaxAdd']['run'] = (parcel, onSuccess, onError) => {
        setAjaxAddingState({inProgress: true, error: null});

        Request.add(parcel)
            .then(entity => {
                add(entity);
                setAjaxAddingState({inProgress: false, error: null});
                if (onSuccess) {
                    onSuccess(entity);
                }
            })
            .catch(error => {
                setAjaxAddingState({inProgress: false, error: error});
                if (onError) {
                    onError(error);
                }
            });

        return parcel;
    };

    const ajaxRemove: IEntityStore<T>['ajaxRemove']['run'] = (parcel, onSuccess, onError) => {
        setAjaxRemovingState({inProgress: true, error: null});

        Request.add(parcel)
            .then((entity) => {
                removeById(entity.id);
                setAjaxRemovingState({inProgress: false, error: null});
                if (onSuccess) {
                    onSuccess(entity);
                }
            })
            .catch(error => {
                setAjaxRemovingState({inProgress: false, error: error});
                if (onError) {
                    onError(error);
                }
            });

        return parcel;
    };

    const ajaxUpdate: IEntityStore<T>['ajaxUpdate']['run'] = (parcel, onSuccess, onError) => {
        setAjaxUpdatingState({inProgress: true, error: null});

        Request.add(parcel)
            .then((entity) => {
                update(entity);
                setAjaxUpdatingState({inProgress: false, error: null});
                if (onSuccess) {
                    onSuccess(entity);
                }
            })
            .catch(error => {
                setAjaxUpdatingState({inProgress: false, error: error});
                if (onError) {
                    onError(error);
                }
            });

        return parcel;
    };

    return {
        data,
        ajaxBulkAdd: {
            run: ajaxBulkAdd,
            state: ajaxBulkAddingState
        },
        ajaxAdd: {
            run: ajaxAdd,
            state: ajaxAddingState
        },
        ajaxRemove: {
            run: ajaxRemove,
            state: ajaxRemovingState
        },
        ajaxUpdate: {
            run: ajaxUpdate,
            state: ajaxUpdatingState
        },
    };
}

import {Dispatch, SetStateAction, useState} from 'react';
import {AjaxState, IEntityData, IEntityStore} from './interfaces';
import IEntity from 'main/models/interfaces/IEntity';
import Request from 'libs/http-request/Request';

export default function buildStore<T extends IEntity>(
    [data, setData]: [IEntityData<T>, Dispatch<SetStateAction<IEntityData<T>>>]
): IEntityStore<T> {

    const add = (...entities: T[]) => {
        setData(data => {
            const _byId: typeof data.byId = {};
            const _allIds: typeof data.allIds = [];

            for (let entity of entities) {
                if (!(entity.id in data.byId)) {
                    _byId[entity.id] = entity;
                    _allIds.push(entity.id);
                }
            }

            if (_allIds.length === 0) {
                return data;
            }

            return {
                byId: {...data.byId, ..._byId},
                allIds: [...data.allIds, ..._allIds]
            };
        });
    };

    const removeById = (entityId: T['id']) => {
        setData(data => {
            if (!(entityId in data.byId)) {
                return data;
            }

            const {[entityId]: _, ...newById} = data.byId;
            const newAllIds = data.allIds.filter(id => id !== entityId);

            return {
                byId: newById,
                allIds: newAllIds
            };
        });
    };

    const update = (entity: T) => {
        setData(data => {
            if (!(entity.id in data.byId)) {
                return data;
            }

            return {
                byId: {
                    ...data.byId,
                    [entity.id]: entity,
                },
                allIds: data.allIds
            };
        });
    };

    const [ajaxListingState, setAjaxListingState] = useState<AjaxState>({inProgress: false, error: null});

    const [ajaxReadingState, setAjaxReadingState] = useState<AjaxState>({inProgress: false, error: null});

    const [ajaxCreatingState, setAjaxCreatingState] = useState<AjaxState>({inProgress: false, error: null});

    const [ajaxDeletingState, setAjaxDeletingState] = useState<AjaxState>({inProgress: false, error: null});

    const [ajaxUpdatingState, setAjaxUpdatingState] = useState<AjaxState>({inProgress: false, error: null});

    const ajaxList: IEntityStore<T>['ajaxList']['run'] = (parcel) => {
        setAjaxListingState({inProgress: true, error: null});

        return new Promise((resolve, reject) => {
            Request.add(parcel)
                .then(entities => {
                    add(...entities);
                    setAjaxListingState({inProgress: false, error: null});
                    resolve(entities);
                })
                .catch(error => {
                    setAjaxListingState({inProgress: false, error: error});
                    reject(error);
                });
        });
    };

    const ajaxRead: IEntityStore<T>['ajaxRead']['run'] = (parcel) => {
        setAjaxReadingState({inProgress: true, error: null});

        return new Promise((resolve, reject) => {
            Request.add(parcel)
                .then(entity => {
                    add(entity);
                    setAjaxReadingState({inProgress: false, error: null});
                    resolve(entity);
                })
                .catch(error => {
                    setAjaxReadingState({inProgress: false, error: error});
                    reject(error);
                });
        });
    };

    const ajaxCreate: IEntityStore<T>['ajaxCreate']['run'] = (parcel) => {
        setAjaxCreatingState({inProgress: true, error: null});

        return new Promise((resolve, reject) => {
            Request.add(parcel)
                .then(entity => {
                    add(entity);
                    setAjaxCreatingState({inProgress: false, error: null});
                    resolve(entity);
                })
                .catch(error => {
                    setAjaxCreatingState({inProgress: false, error: error});
                    reject(error);
                });
        });
    };

    const ajaxDelete: IEntityStore<T>['ajaxDelete']['run'] = (parcel) => {
        setAjaxDeletingState({inProgress: true, error: null});

        return new Promise((resolve, reject) => {
            Request.add(parcel)
                .then((entity) => {
                    removeById(entity.id);
                    setAjaxDeletingState({inProgress: false, error: null});
                    resolve(entity);
                })
                .catch(error => {
                    setAjaxDeletingState({inProgress: false, error: error});
                    reject(error);
                });
        });
    };

    const ajaxUpdate: IEntityStore<T>['ajaxUpdate']['run'] = (parcel) => {
        setAjaxUpdatingState({inProgress: true, error: null});

        return new Promise((resolve, reject) => {
            Request.add(parcel)
                .then((entity) => {
                    update(entity);
                    setAjaxUpdatingState({inProgress: false, error: null});
                    resolve(entity);
                })
                .catch(error => {
                    setAjaxUpdatingState({inProgress: false, error: error});
                    reject(error);
                });
        });
    };

    return {
        data,
        ajaxList: {
            run: ajaxList,
            state: ajaxListingState
        },
        ajaxRead: {
            run: ajaxRead,
            state: ajaxReadingState
        },
        ajaxCreate: {
            run: ajaxCreate,
            state: ajaxCreatingState
        },
        ajaxDelete: {
            run: ajaxDelete,
            state: ajaxDeletingState
        },
        ajaxUpdate: {
            run: ajaxUpdate,
            state: ajaxUpdatingState
        },
    };
}

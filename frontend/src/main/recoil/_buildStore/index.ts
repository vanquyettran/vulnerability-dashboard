import {Dispatch, SetStateAction, useMemo} from 'react';
import {IEntityData, IEntityStore} from '../interfaces';
import IEntity from 'main/models/interfaces/IEntity';
import useAjaxDelete from './useAjaxDelete';
import useAjaxUpdate from './useAjaxUpdate';
import useAjaxList from './useAjaxList';
import useAjaxRead from './useAjaxRead';
import useAjaxCreate from './useAjaxCreate';

export default function buildStore<T extends IEntity>(
    [data, setData]: [IEntityData<T>, Dispatch<SetStateAction<IEntityData<T>>>]
): IEntityStore<T> {

    const add = (...entities: T[]) => {
        setData(data => {
            const _byId: typeof data.byId = {};
            const _allIds: typeof data.allIds = [];

            for (const entity of entities) {
                if (!(entity.id in data.byId)) {
                    _byId[entity.id] = entity;
                    _allIds.push(entity.id);
                }
            }

            if (_allIds.length === 0) {
                return data;
            }

            return {
                byId: {...data.byId, ..._byId},
                allIds: [...data.allIds, ..._allIds]
            };
        });
    };

    const removeById = (entityId: T['id']) => {
        setData(data => {
            if (!(entityId in data.byId)) {
                return data;
            }

            const {[entityId]: _, ...newById} = data.byId;
            const newAllIds = data.allIds.filter(id => id !== entityId);

            return {
                byId: newById,
                allIds: newAllIds
            };
        });
    };

    const update = (entity: T) => {
        setData(data => {
            if (!(entity.id in data.byId)) {
                return data;
            }

            return {
                byId: {
                    ...data.byId,
                    [entity.id]: entity,
                },
                allIds: data.allIds
            };
        });
    };

    const entities = useMemo(() => data.allIds.map(id => data.byId[id]), [data]);

    const findById = (id: T['id']): T | undefined => data.byId[id];

    const ajaxList = useAjaxList(add);

    const ajaxRead = useAjaxRead(add);

    const ajaxCreate = useAjaxCreate(add);

    const ajaxDelete = useAjaxDelete(removeById);

    const ajaxUpdate = useAjaxUpdate(update);

    return {
        data,
        entities,
        findById,
        ajaxList,
        ajaxRead,
        ajaxCreate,
        ajaxDelete,
        ajaxUpdate
    };
}

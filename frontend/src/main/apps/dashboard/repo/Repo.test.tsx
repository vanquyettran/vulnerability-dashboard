import React, {useEffect} from 'react';
import {render, waitFor} from '@testing-library/react';
import Repo from './Repo';
import __ from 'main/i18n';
import userEvent from '@testing-library/user-event/dist';
import useRepoActions from 'main/store/repo/useRepoActions';
import Request, {MOCK_DEFAULT} from 'libs/http-request/Request';
import AppProvider from 'main/AppProvider';
import useRepoData from 'main/store/repo/useRepoData';
import RepoListParcel from 'main/api/repo/RepoListParcel';
import Spinner from 'uikit/components/spinner/Spinner';
import createDraftRepo from 'main/models/factory/createDraftRepo';

function MyTestComponent() {
    const {ajaxList} = useRepoActions();
    const repoData = useRepoData();
    const repo = repoData.entities[0];

    useEffect(() => {
        ajaxList.run(new RepoListParcel());
    }, []);

    if (!repo) {
        return <Spinner/>;
    }

    return <Repo repo={repo}/>;
}

describe('<Repo/>', () => {
    it('renders and updates repo', async () => {
        const repo = createDraftRepo({id: 'a', name: 'hello'});

        Request.setTestMockQueue([repo]);

        const screen = render(<AppProvider><MyTestComponent/></AppProvider>);

        await waitFor(() => {
            expect(screen.queryByRole('progressbar')).not.toBeInTheDocument();
            expect(screen.queryByText('hello')).toBeInTheDocument();
        });

        const editButton = screen.getByTitle(__('Edit'));
        expect(editButton).toBeInTheDocument();

        userEvent.click(editButton);

        const additionalText = ' glad to see you';

        const textarea = screen.getByPlaceholderText(__('Enter repo name')) as HTMLTextAreaElement;
        userEvent.type(textarea, additionalText);

        Request.setTestMockQueue(
            new Error('Server error, please try again'),
            MOCK_DEFAULT,
        );

        userEvent.type(textarea, '{Enter}');
        expect(screen.getByRole('progressbar')).toBeInTheDocument();

        await waitFor(() => {
            expect(screen.queryByRole('progressbar')).not.toBeInTheDocument();
            expect(screen.queryByText('Server error, please try again')).toBeInTheDocument();
        });

        userEvent.type(textarea, '{Enter}');
        expect(screen.getByRole('progressbar')).toBeInTheDocument();

        await waitFor(() => {
            expect(screen.queryByRole('progressbar')).not.toBeInTheDocument();
            expect(screen.queryByPlaceholderText(__('Enter repo name'))).not.toBeInTheDocument();
            expect(screen.queryByText(repo.name + additionalText)).toBeInTheDocument();
        });
    });
});

import './RepoDeleteButton.less';
import React, {useEffect, useMemo, useState, useRef} from 'react';
import ConfirmationDialog from 'uikit/components/confirmation-dialog/ConfirmationDialog';
import IRepo from 'main/models/interfaces/IRepo';
import RepoDeleteParcel from 'main/api/repo/RepoDeleteParcel';
import Request from 'libs/http-request/Request';
import __ from 'main/i18n';
import Dropdown from 'uikit/components/dropdown/Dropdown';
import useRepoActions from 'main/store/repo/useRepoActions';
import Button from 'uikit/components/button/Button';
import Spinner from 'uikit/components/spinner/Spinner';
import Toasts, {TOAST_ERROR} from 'uikit/components/toast/Toasts';

export default function RepoDeleteButton({repo}: {repo: IRepo}) {
    const {ajaxDelete} = useRepoActions();

    const [showsConfirmation, setShowsConfirmation] = useState(false);

    const parcel = useMemo(() => new RepoDeleteParcel(repo), [repo]);

    useEffect(() => {
        return () => {
            Request.destroy(parcel);
        };
    }, [parcel]);

    const buttonRef = useRef(null);

    return (
        <>
            <Button
                className="RepoDeleteButton"
                iconOnly
                icon={ajaxDelete.state.inProgress ? <Spinner/> : "trash"}
                title={__('Delete')}
                appearance="text-neutral"
                onClick={() => {
                    setShowsConfirmation(true);
                }}
                readOnly={ajaxDelete.state.inProgress}
                ref={buttonRef}
            />
            {showsConfirmation && buttonRef.current !== null && (
                <Dropdown
                    opener={buttonRef.current}
                    close={() => {
                        setShowsConfirmation(false);
                    }}
                    horizontalAlignment="right"
                >
                    <ConfirmationDialog
                        confirm={() => {
                            setShowsConfirmation(false);
                            ajaxDelete.run(parcel).catch(error => {
                                Toasts.add(TOAST_ERROR, error.message);
                            });
                        }}
                        cancel={() => {
                            setShowsConfirmation(false);
                        }}
                        title={__('Delete repo')}
                        message={__('Are you sure you want to delete this repo?')}
                    />
                </Dropdown>
            )}
        </>
    );
}

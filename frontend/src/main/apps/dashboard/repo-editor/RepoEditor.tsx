import './RepoEditor.less';
import React, {useContext, useState} from 'react';
import IRepo from 'main/interfaces/IRepo';
import TextInput from 'uikit/components/text-input/TextInput';
import __ from 'main/i18n';
import RepoContext from 'main/store/repo/RepoContext';
import useRequest from 'main/hooks/useRequest';
import RepoUpdateParcel from 'main/api/repo/RepoUpdateParcel';

export default function RepoEditor({repo, onSuccess}: {repo: IRepo, onSuccess: () => void}) {

    const repoStore = useContext(RepoContext);

    const [repoName, setRepoName] = useState('');

    const {
        inProgress: isRepoEditing,
        error: repoEditingError,
        run: triggerRepoEditing,
    } = useRequest<IRepo>(new RepoUpdateParcel({
        id: repo.id,
        name: repoName
    }), {
        manual: true,
        onSuccess: data => {
            repoStore.update(data);
            onSuccess();
        }
    });

    return (
        <form
            onSubmit={(ev) => {
                ev.preventDefault();
                if (!isRepoEditing) {
                    triggerRepoEditing();
                }
            }}
        >
            <TextInput
                value={repoName}
                setValue={setRepoName}
            />
            {
                repoEditingError !== null &&
                <div className="error">
                    {repoEditingError.message}
                </div>
            }
            <button
                type="submit"
                disabled={isRepoEditing}
            >
                {isRepoEditing ? __('Saving...') : __('Save')}
            </button>
        </form>
    );
}

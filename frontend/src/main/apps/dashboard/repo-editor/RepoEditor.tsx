import './RepoEditor.less';
import React, {useEffect, useMemo, useState} from 'react';
import IRepo from 'main/interfaces/IRepo';
import TextInput from 'uikit/components/text-input/TextInput';
import __ from 'main/i18n';
import RepoUpdateParcel from 'main/api/repo/RepoUpdateParcel';
import {useRepoStore} from 'main/recoil/hooks';
import Request from 'libs/http-request/Request';

export default function RepoEditor({repo, onSuccess}: {repo: IRepo, onSuccess: () => void}) {

    const repoStore = useRepoStore();

    const {ajaxUpdate} = repoStore;

    const {inProgress, error} = ajaxUpdate.state;

    const [repoName, setRepoName] = useState('');

    const parcel = useMemo(() => new RepoUpdateParcel({...repo, name: repoName}), [repoName]);

    useEffect(() => {
        return () => {
            Request.destroy(parcel);
        };
    }, [parcel]);

    return (
        <form
            onSubmit={(ev) => {
                ev.preventDefault();
                if (!inProgress) {
                    ajaxUpdate.run(parcel, onSuccess);
                }
            }}
        >
            <TextInput
                value={repoName}
                setValue={setRepoName}
            />
            {
                error !== null &&
                <div className="error">
                    {error.message}
                </div>
            }
            <button
                type="submit"
                disabled={inProgress}
            >
                {inProgress ? __('Saving...') : __('Save')}
            </button>
        </form>
    );
}

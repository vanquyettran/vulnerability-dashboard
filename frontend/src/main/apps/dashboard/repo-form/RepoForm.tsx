import './RepoForm.less';
import React, {useMemo} from 'react';
import __ from 'main/i18n';
import {AjaxAction} from 'main/store/interfaces';
import IRepo from 'main/models/interfaces/IRepo';
import Parcel from 'libs/http-request/Parcel';
import TextArea from 'uikit/components/text-area/TextArea';
import Button from 'uikit/components/button/Button';
import Spinner from 'uikit/components/spinner/Spinner';
import {shallowEqual} from 'libs/utils/object';
import getRepoError from 'main/models/validation/getRepoError';

export default function RepoForm(
    {
        values,
        setValues,
        action,
        parcel,
        onSuccess,
        onCancel,
    }: {
        values: IRepo,
        setValues: React.Dispatch<React.SetStateAction<IRepo>>,
        action: AjaxAction<IRepo>,
        parcel: Parcel<IRepo>,
        onSuccess?: (repo: IRepo) => void,
        onCancel?: () => void,
    },
) {
    const initialValues = useMemo(() => ({...values}), []);
    const {inProgress, error} = action.state;

    const hasChanges = !shallowEqual(values, initialValues);
    const validationError = getRepoError(values);
    const disabled = !hasChanges || validationError !== null;

    return (
        <form
            className="RepoForm"
            onSubmit={(ev) => {
                ev.preventDefault();
                action.run(parcel).then(onSuccess);
            }}
        >
            <div className="content">
                <TextArea
                    value={values.name}
                    setValue={name => {
                        setValues({...values, name});
                    }}
                    rows={5}
                    autoFocus
                    readOnly={inProgress}
                />
                {error !== null && (
                    <div className="error">
                        {error.message}
                    </div>
                )}
            </div>
            <div className="actions">
                <Button
                    title={validationError !== null ? validationError : __('Save')}
                    type="submit"
                    iconOnly
                    icon={inProgress ? <Spinner/> : 'tick'}
                    appearance="text-primary"
                    disabled={disabled}
                    readOnly={inProgress}
                />
                {onCancel && (
                    <Button
                        title={__('Cancel')}
                        type="reset"
                        iconOnly
                        icon="times"
                        appearance="text-danger"
                        onClick={() => {
                            onCancel();
                        }}
                        disabled={inProgress}
                    />
                )}
            </div>
        </form>
    );
}

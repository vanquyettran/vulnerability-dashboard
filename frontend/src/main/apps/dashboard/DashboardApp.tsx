import './DashboardApp.less';
import React, {useState} from 'react';
import RepoListParcel from 'main/api/repo/RepoListParcel';
import Spinner from 'uikit/components/spinner/Spinner';
import __ from 'main/i18n';
import RepoCreateParcel from 'main/api/repo/RepoCreateParcel';
import IRepo from 'main/interfaces/IRepo';
import useRequest from 'main/hooks/useRequest';
import Icon from 'uikit/components/icon/Icon';
import RepoUpdateParcel from 'main/api/repo/RepoUpdateParcel';
import RepoDeleteParcel from 'main/api/repo/RepoDeleteParcel';

export default function DashboardApp() {

    const [repoName, setRepoName] = useState('');

    const [editingRepo, setEditingRepo] = useState<IRepo | null>(null);

    const {
        data: data,
        inProgress: isLoading,
        error: error,
    } = useRequest<IRepo[]>(new RepoListParcel());

    const {
        inProgress: isNewRepoCreating,
        error: newRepoCreatingError,
        run: triggerNewRepoCreating,
    } = useRequest<IRepo>(new RepoCreateParcel({id: '', name: repoName}), {
        manual: true,
        onSuccess: data => {
            console.log('Created...', data);
        },
        onError: error => {
            console.log('Error...', error);
        },
    });

    const {
        inProgress: isRepoEditing,
        error: repoEditingError,
        run: triggerRepoEditing,
    } = useRequest<IRepo>(new RepoUpdateParcel(editingRepo), {
        manual: true,
        onSuccess: data => {
            console.log('Edited...', data);
            setEditingRepo(null);
        },
        onError: error => {
            console.log('Error...', error);
        },
    });

    const [deletingRepoId, setDeletingRepoId] = useState<string | null>(null);

    const {
        inProgress: isRepoDeleting,
        error: repoDeletingError,
        run: triggerRepoDeleting,
    } = useRequest(new RepoDeleteParcel(deletingRepoId), {
        manual: true,
        onSuccess: data => {
            console.log('Deleted...', data);
            setDeletingRepoId(null);
        },
        onError: error => {
            console.log('Error...', error);
        },
    });

    return <div className="DashboardApp">
        <h1 className="title">Dashboard</h1>
        {
            isLoading &&
            <Spinner/>
        }
        {
            error !== null &&
            <div className="error">{error.message}</div>
        }
        {
            data !== null &&
            <div className="repos">
                {
                    data.map((repo: IRepo) => {
                        return (
                            <div className="repo" key={repo.id}>
                                {!(editingRepo !== null && repo.id === editingRepo.id) ? (
                                    <div>
                                        <span>{repo.name}</span>
                                        <button
                                            type="button"
                                            onClick={() => {
                                                setEditingRepo(repo);
                                            }}
                                        >
                                            <Icon name="pencil"/>
                                        </button>
                                        <button
                                            type="button"
                                            onClick={() => {
                                                setDeletingRepoId(repo.id);
                                                triggerRepoDeleting();
                                            }}
                                        >
                                            <Icon name="trash"/>
                                        </button>
                                    </div>
                                ) : (
                                    <form
                                        onSubmit={ev => {
                                            ev.preventDefault();
                                            triggerRepoEditing();
                                        }}
                                        onReset={ev => {
                                            ev.preventDefault();
                                            setEditingRepo(null);
                                        }}
                                    >
                                        <input
                                            type="text"
                                            value={editingRepo.name}
                                            onChange={ev => {
                                                setEditingRepo({
                                                    ...editingRepo,
                                                    name: ev.target.value
                                                });
                                            }}
                                        />
                                        <button type="submit" disabled={isRepoEditing}>
                                            {isRepoEditing ? __('Saving...') : __('Save')}
                                        </button>
                                        <button type="reset">{__('Cancel')}</button>
                                    </form>
                                )}
                            </div>
                        );
                    })
                }
            </div>
        }
        <form
            onSubmit={ev => {
                ev.preventDefault();
                triggerNewRepoCreating();
            }}
        >
            <input
                type="text"
                value={repoName}
                onChange={ev => setRepoName(ev.target.value)}
            />
            {
                newRepoCreatingError !== null
                && <div>{newRepoCreatingError.message}</div>
            }
            <button
                type="submit"
            >
                {isNewRepoCreating ? __('Creating...') : __('Create Repo')}
            </button>
        </form>
    </div>;
}

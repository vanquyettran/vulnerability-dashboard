import './DashboardApp.less';
import React, {useState} from 'react';
import RepoListParcel from 'main/api/repo/RepoListParcel';
import Spinner from 'uikit/components/spinner/Spinner';
import __ from 'main/i18n';
import RepoCreateParcel from 'main/api/repo/RepoCreateParcel';
import IRepo from 'main/interfaces/IRepo';
import useRequest from 'main/hooks/useRequest';

export default function DashboardApp() {

    const [repoName, setRepoName] = useState('');

    const {
        data: data,
        inProgress: isLoading,
        error: error,
    } = useRequest<IRepo[]>(new RepoListParcel());

    const {
        inProgress: isNewRepoCreating,
        error: newRepoCreatingError,
        run: triggerNewRepoCreating,
    } = useRequest<IRepo>(new RepoCreateParcel({id: '', name: repoName}), {
        manual: true,
        onSuccess: data => {
            console.log('Created...', data);
        },
        onError: error => {
            console.log('Error...', error);
        },
    });

    return <div className="DashboardApp">
        <h1 className="title">Dashboard</h1>
        {
            isLoading &&
            <Spinner/>
        }
        {
            error !== null &&
            <div className="error">{error.message}</div>
        }
        {
            data !== null &&
            <div className="repos">
                {
                    data.map((repo: IRepo) => {
                        return (
                            <div className="repo" key={repo.id}>
                                {repo.name}
                            </div>
                        );
                    })
                }
            </div>
        }
        <form
            onSubmit={ev => {
                ev.preventDefault();
                triggerNewRepoCreating();
            }}
        >
            <input
                type="text"
                value={repoName}
                onChange={ev => setRepoName(ev.target.value)}
            />
            {
                newRepoCreatingError !== null
                && <div>{newRepoCreatingError.message}</div>
            }
            <button
                type="submit"
            >
                {isNewRepoCreating ? __('Creating...') : __('Create Repo')}
            </button>
        </form>
    </div>;
}

import React, {useEffect, useRef} from 'react';
import CardDetailedView from 'main/apps/kanban/card-detailed-view/CardDetailedView';
import {render, waitFor} from '@testing-library/react';
import TestProvider from 'main/TestProvider';
import useListData from 'main/store/list/useListData';
import useCardData from 'main/store/card/useCardData';
import useCardActions from 'main/store/card/useCardActions';
import useRepoActions from 'main/store/repo/useRepoActions';
import RepoCreateParcel from 'main/api/repo/RepoCreateParcel';
import CardCreateParcel from 'main/api/card/CardCreateParcel';
import createDraftRepo from 'main/models/factory/createDraftRepo';
import ICard from 'main/models/interfaces/ICard';
import createDraftCard from 'main/models/factory/createDraftCard';
import Request, {MOCK_DEFAULT} from 'libs/http-request/Request';
import __ from 'main/i18n';
import userEvent from '@testing-library/user-event/dist';
import {act} from 'react-dom/test-utils';

function MyTestComponent({cardRef, onClose}: {cardRef: {current: ICard | null}, onClose: () => void}) {
    const repoActions = useRepoActions();
    const cardActions = useCardActions();
    const listData = useListData();
    const cardData = useCardData();

    useEffect(() => {
        repoActions.ajaxCreate.run(new RepoCreateParcel(
            createDraftRepo({name: 'doraemon'}),
        ));
    }, []);

    const isCardCreationCalled = useRef(false);

    useEffect(() => {
        if (listData.entities.length === 4) {
            if (!isCardCreationCalled.current) {
                isCardCreationCalled.current = true;
                cardActions.ajaxCreate.run(new CardCreateParcel(
                    createDraftCard({
                        text: 'nobita',
                        listId: listData.entities[0].id,
                    }),
                ));
            }
        }
    }, [listData, isCardCreationCalled.current]);

    const card = cardData.entities[0];

    if (!card) {
        return <span>Generating testing data...</span>;
    }

    cardRef.current = card;

    return (
        <CardDetailedView
            cardId={card.id}
            listId={card.listId}
            onClose={onClose}
        />
    );
}


describe('<CardDetailedView/>', () => {
    it('moves to another list', async () => {
        await act(async () => {
            const onClose = jest.fn();

            const cardRef: {current: ICard | null} = {current: null};

            Request.setTestMockQueue(
                MOCK_DEFAULT, // Create repo
                MOCK_DEFAULT, // Create list 1
                MOCK_DEFAULT, // Create list 2
                MOCK_DEFAULT, // Create list 3
                MOCK_DEFAULT, // Create list 4
                MOCK_DEFAULT, // Create card
                () => {
                    return cardRef.current;
                }, // Read card
                MOCK_DEFAULT, // Move to Confirmed
                MOCK_DEFAULT, // Move to Fixed
            );

            const screen = render(
                <TestProvider>
                    <MyTestComponent cardRef={cardRef} onClose={onClose}/>
                </TestProvider>,
            );

            expect(screen.queryByText('Generating testing data...')).toBeInTheDocument();

            await waitFor(() => {
                expect(screen.queryByText('Generating testing data...')).not.toBeInTheDocument();
            });

            const selectBox = screen.queryByLabelText(__('Status')) as HTMLSelectElement;

            await waitFor(() => {
                expect(selectBox).toBeInTheDocument();
            });

            const getOptionsAsString = () => (
                Array.from(selectBox.options).map(option => {
                    return option.textContent;
                }).join('|')
            );

            const getLog = (index: number) => {
                const log = cardRef.current!.activityLog[index];

                return screen.queryByText(__('Moved from ::from to ::to at ::timestamp(DATE)', {
                    from: log.fromListTitle,
                    to: log.toListTitle,
                    timestamp: log.timestamp,
                }))
            }

            expect(getOptionsAsString()).toBe('Open|Confirmed|False Positive|Fixed');

            userEvent.selectOptions(selectBox, 'Confirmed');

            await waitFor(() => {
                expect(screen.queryByText(__('Activity log'))).toBeInTheDocument();
            });

            expect(getLog(0)).toBeInTheDocument();

            expect(getOptionsAsString()).toBe('Confirmed|Fixed');

            userEvent.selectOptions(selectBox, 'Fixed');

            expect(getLog(1)).toBeInTheDocument();

            expect(getOptionsAsString()).toBe('Fixed');

            const closeBtn = screen.getByTitle(__('Close'));

            userEvent.click(closeBtn);

            expect(onClose).toBeCalledTimes(1);
        });
    });
});

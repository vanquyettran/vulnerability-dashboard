import './CardDetailedView.less';
import React, {useEffect, useMemo, useState} from 'react';
import ICard from 'main/models/interfaces/ICard';
import TextArea from 'uikit/components/text-area/TextArea';
import useCardActions from 'main/store/card/useCardActions';
import CardUpdateParcel from 'main/api/card/CardUpdateParcel';
import __ from 'main/i18n';
import Button from 'uikit/components/button/Button';
import useListData from 'main/store/list/useListData';
import Toasts, {TOAST_ERROR} from 'uikit/components/toast/Toasts';
import {shallowEqual} from 'libs/utils/object';
import canMoveCard from 'main/models/utils/canMoveCard';
import CardMoveParcel from 'main/api/card/CardMoveParcel';
import IList from 'main/models/interfaces/IList';
import useCardData from 'main/store/card/useCardData';
import createDraftCard from 'main/models/factory/createDraftCard';
import CardReadParcel from 'main/api/card/CardReadParcel';
import Request from 'libs/http-request/Request';
import Spinner from 'uikit/components/spinner/Spinner';
import NoticeBox from 'uikit/components/notice-box/NoticeBox';

export default function CardDetailedView(
    {
        cardId,
        listId,
        onClose,
    }: {
        cardId: ICard['id'],
        listId: IList['id'],
        onClose: () => void,
    }
) {
    const cardData = useCardData();
    const listData = useListData();
    const {ajaxRead, ajaxBackgroundUpdate, ajaxBackgroundMove} = useCardActions();

    const card = cardData.findById(cardId);

    useEffect(() => {
        if (card) {
            return;
        }
        const parcel = new CardReadParcel(cardId, listId);
        ajaxRead.run(parcel);
        return () => {
            Request.abandon(parcel);
        };
    }, []);

    const [draftCard, setDraftCard] = useState(createDraftCard());

    useEffect(() => {
        if (card) {
            setDraftCard(card);
        }
    }, [card]);

    const list = useMemo(() => {
        if (!card) {
            return undefined;
        }
        return listData.findById(card.listId);
    }, [card, listData]);

    const runBackgroundUpdate = () => {
        if (!card) {
            return;
        }
        if (shallowEqual(draftCard, card)) {
            return;
        }
        ajaxBackgroundUpdate.run(new CardUpdateParcel(draftCard))
            .catch((error) => {
                setDraftCard(card);
                Toasts.add(TOAST_ERROR, error.message);
            });
    };

    const moveCard =(toListId: IList['id']) => {
        if (!list || !card) {
            return;
        }
        const toList = listData.findById(toListId);
        if (!toList) {
            return;
        }
        ajaxBackgroundMove.run(new CardMoveParcel({
            cardId: card.id,
            fromList: list,
            toList: toList,
            toPosInList: 1e9, // append after all other cards
        })).catch((error) => {
            Toasts.add(TOAST_ERROR, error.message);
        });
    };

    return (
        <div className="CardDetailedView">
            {ajaxRead.state.inProgress && (
                <Spinner/>
            )}
            {ajaxRead.state.error && (
                <NoticeBox type="error" message={ajaxRead.state.error.message}/>
            )}
            {card && (
                <>
                    <div className="heading">
                        <TextArea
                            value={draftCard.text}
                            setValue={text => {
                                setDraftCard(draftCard => ({...draftCard, text}));
                            }}
                            onBlur={() => {
                                runBackgroundUpdate();
                            }}
                        />
                        <Button
                            title={__('Close')}
                            iconOnly
                            icon="times"
                            appearance="text-neutral"
                            onClick={() => {
                                onClose();
                            }}
                        />
                    </div>
                    <div className="meta">
                        {list && (
                            <select
                                className="status"
                                value={list.id}
                                onChange={ev => {
                                    moveCard(ev.target.value);
                                }}
                            >
                                {listData.entities
                                    .filter(t => (
                                        t.repoId === list.repoId &&
                                        canMoveCard(list, t)
                                    ))
                                    .map(t => (
                                        <option key={t.id} value={t.id}>
                                            {t.title}
                                        </option>
                                    ))
                                }
                            </select>
                        )}
                    </div>
                    <div className="body">
                        <label>{__('Notes')}</label>
                        <TextArea
                            value={draftCard.note}
                            setValue={note => {
                                setDraftCard(draftCard => ({...draftCard, note}));
                            }}
                            onBlur={() => {
                                runBackgroundUpdate();
                            }}
                            placeholder={__('Add notes...')}
                            minRows={5}
                            multipleLines
                        />
                    </div>
                </>
            )}
        </div>
    );
}

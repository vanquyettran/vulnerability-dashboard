import './Board.less';
import React, {useState, Dispatch, SetStateAction} from 'react';
import IList from 'main/models/interfaces/IList';
import Lane from 'main/apps/kanban/lane/Lane';
import canMoveCard from 'main/models/utils/canMoveCard';
import {DragDropContext, DragStart, DropResult} from 'react-beautiful-dnd';
import CardMoveParcel from 'main/api/card/CardMoveParcel';
import ICard from 'main/models/interfaces/ICard';
import useCardData from 'main/store/card/useCardData';
import useCardActions from 'main/store/card/useCardActions';
import Toasts, {TOAST_ERROR} from 'uikit/components/toast/Toasts';

export default function Board(
    {
        lists,
        setSelectedCardId,
    }: {
        lists: IList[],
        setSelectedCardId: Dispatch<SetStateAction<ICard['id'] | null>>
    },
) {
    const cardData = useCardData();
    const cardActions = useCardActions();

    const findList = (listId: IList['id']) => {
        return lists.find(t => t.id === listId);
    };

    const [draggingSourceListId, setDraggingSourceListId] = useState<IList['id'] | null>(null);

    const onDragStart = (initial: DragStart) => {
        setDraggingSourceListId(initial.source.droppableId);
    };

    const onDragEnd = (result: DropResult) => {
        const {source, destination} = result;

        setDraggingSourceListId(null);

        if (!destination) {
            return;
        }

        if (destination.droppableId === source.droppableId &&
            destination.index === source.index
        ) {
            return;
        }

        const sourceList = findList(source.droppableId);
        if (!sourceList) {
            return;
        }
        const destinationList = findList(destination.droppableId);
        if (!destinationList) {
            return;
        }

        const cardsInSourceList = cardData.entities.filter(
            card => card.listId === sourceList.id,
        );
        const card = cardsInSourceList[source.index];
        // eslint-disable-next-line
        if (!card) {
            return;
        }

        cardActions.ajaxBackgroundMove.run(
            new CardMoveParcel({
                cardId: card.id,
                fromList: sourceList,
                toList: destinationList,
                toPosInList: destination.index,
            }),
        ).catch(error => {
            Toasts.add(TOAST_ERROR, error.message);
        });
    };

    const draggingSourceList: IList | undefined = (() => {
        if (draggingSourceListId === null) {
            return undefined;
        }

        return findList(draggingSourceListId);
    })();

    return (
        <div className="Board">
            <DragDropContext onDragStart={onDragStart} onDragEnd={onDragEnd}>
                <ul>
                    {lists.map((list) => (
                        <li key={list.id}>
                            <Lane
                                list={list}
                                isDropDisabled={
                                    draggingSourceList !== undefined &&
                                    !canMoveCard(draggingSourceList, list)
                                }
                                setSelectedCardId={setSelectedCardId}
                            />
                        </li>
                    ))}
                </ul>
            </DragDropContext>
        </div>
    );
}

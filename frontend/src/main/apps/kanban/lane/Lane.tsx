import './Lane.less';
import React, {Dispatch, SetStateAction, useEffect} from 'react';
import IList from 'main/models/interfaces/IList';
import CardListParcel from 'main/api/card/CardListParcel';
import Request from 'libs/http-request/Request';
import Card from 'main/apps/kanban/card/Card';
import {
    Draggable,
    DraggableProvided,
    DraggableStateSnapshot,
    Droppable,
    DroppableProvided,
} from 'react-beautiful-dnd';
import useCardActions from 'main/store/card/useCardActions';
import {filterableCards} from 'main/store/card/selectors';
import {useRecoilValue} from 'recoil';
import ICard from 'main/models/interfaces/ICard';
import NewCard from 'main/apps/kanban/new-card/NewCard';

export default function Lane(
    {
        list,
        isDropDisabled,
        setSelectedCardId,
    }: {
        list: IList,
        isDropDisabled: boolean,
        setSelectedCardId: Dispatch<SetStateAction<ICard['id'] | null>>
    },
) {
    const cardActions = useCardActions();
    const cards = useRecoilValue(filterableCards({listId: list.id}));

    useEffect(() => {
        const parcel = new CardListParcel(list.id);
        cardActions.ajaxList.run(parcel);

        return () => {
            Request.destroy(parcel);
        };
    }, [list]);

    return (
        <Droppable droppableId={list.id} isDropDisabled={isDropDisabled}>
            {(provided: DroppableProvided) => (
                <div
                    className={[
                        'Lane',
                        isDropDisabled && 'is-drop-disabled',
                    ]}
                    ref={provided.innerRef}
                    {...provided.droppableProps}
                >
                    <h3 className="title">
                        {list.title}
                    </h3>
                    <div className="content">
                        {cards.map((card, index) => (
                            <Draggable key={card.id} draggableId={card.id} index={index}>
                                {(provided: DraggableProvided, snapshot: DraggableStateSnapshot) => (
                                    <div
                                        className={[
                                            'card-holder',
                                            snapshot.isDragging && 'is-dragging',
                                        ]}
                                        ref={provided.innerRef}
                                        {...provided.draggableProps}
                                        {...provided.dragHandleProps}
                                    >
                                        <Card
                                            card={card}
                                            setSelectedCardId={setSelectedCardId}
                                        />
                                    </div>
                                )}
                            </Draggable>
                        ))}
                        {provided.placeholder}
                        <NewCard listId={list.id}/>
                    </div>
                </div>
            )}
        </Droppable>
    );
}

import React, {useEffect} from 'react';
import {render, waitFor} from '@testing-library/react';
import Card from './Card';
import __ from 'main/i18n';
import userEvent from '@testing-library/user-event/dist';
import useCardActions from 'main/store/card/useCardActions';
import Request, {MockDefault} from 'libs/http-request/Request';
import TestProvider from 'main/TestProvider';
import useCardData from 'main/store/card/useCardData';
import CardListParcel from 'main/api/card/CardListParcel';
import Spinner from 'uikit/components/spinner/Spinner';
import createDraftCard from 'main/models/factory/createDraftCard';

function MyTestComponent() {
    const {ajaxList} = useCardActions();
    const cardData = useCardData();
    const card = cardData.entities[0];

    useEffect(() => {
        ajaxList.run(new CardListParcel('a'));
    }, []);

    if (!card) {
        return <Spinner/>;
    }

    return <Card card={card}/>;
}

describe('<Card/>', () => {
    it('renders and updates card', async () => {
        const card = createDraftCard({id: 'b', listId: 'a', text: 'hello'});

        Request.setTestMockQueue([card]);

        const screen = render(<TestProvider><MyTestComponent/></TestProvider>);

        await waitFor(() => {
            expect(screen.queryByRole('progressbar')).not.toBeInTheDocument();
            expect(screen.queryByText('hello')).toBeInTheDocument();
        });

        const editButton = screen.getByTitle(__('Edit'));
        expect(editButton).toBeInTheDocument();

        userEvent.click(editButton);

        const additionalText = ' glad to see you';

        const textarea = screen.getByPlaceholderText(__('Enter text for this card')) as HTMLTextAreaElement;
        userEvent.type(textarea, additionalText);

        Request.setTestMockQueue(
            new Error('Server error, please try again'),
            MockDefault,
        );

        userEvent.type(textarea, '{Enter}');
        expect(screen.getByRole('progressbar')).toBeInTheDocument();

        await waitFor(() => {
            expect(screen.queryByRole('progressbar')).not.toBeInTheDocument();
            expect(screen.queryByText('Server error, please try again')).toBeInTheDocument();
        });

        userEvent.type(textarea, '{Enter}');
        expect(screen.getByRole('progressbar')).toBeInTheDocument();

        await waitFor(() => {
            expect(screen.queryByRole('progressbar')).not.toBeInTheDocument();
            expect(screen.queryByPlaceholderText(__('Enter text for this card'))).not.toBeInTheDocument();
            expect(screen.queryByText(card.text + additionalText)).toBeInTheDocument();
        });
    });
});

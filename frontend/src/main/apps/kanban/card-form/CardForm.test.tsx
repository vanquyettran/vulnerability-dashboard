import React, {useState} from 'react';
import {render, waitFor} from '@testing-library/react';
import CardForm from './CardForm';
import __ from 'main/i18n';
import userEvent from '@testing-library/user-event/dist';
import useCardActions from 'main/store/card/useCardActions';
import createDraftCard from 'main/models/factory/createDraftCard';
import CardCreateParcel from 'main/api/card/CardCreateParcel';
import ICard from 'main/models/interfaces/ICard';
import Request from 'libs/http-request/Request';
import ResponseError from 'libs/http-request/ResponseError';
import AppProvider from 'main/AppProvider';

function MyTestComponent({card, onSuccess, onError, onCancel}: {
    card: ICard,
    onSuccess?: (card: ICard) => void,
    onError?: (error: ResponseError) => void,
    onCancel?: () => void,
}) {
    const cardActions = useCardActions();
    const [draftCard, setDraftCard] = useState(card);
    const parcel = new CardCreateParcel(draftCard);

    return (
        <CardForm
            action={cardActions.ajaxCreate}
            parcel={parcel}
            values={draftCard}
            setValues={setDraftCard}
            onSuccess={onSuccess}
            onError={onError}
            onCancel={onCancel}
        />
    );
}

describe('<CardForm/>', () => {
    const myRender = () => {
        const card = createDraftCard({text: 'blo bla', listId: 'my-list-id'});
        const onSuccess = jest.fn();
        const onError = jest.fn();
        const onCancel = jest.fn();

        const screen = render(
            <AppProvider>
                <MyTestComponent
                    card={card}
                    onSuccess={onSuccess}
                    onError={onError}
                    onCancel={onCancel}
                />
            </AppProvider>,
        );

        return {screen, card, onSuccess, onError, onCancel};
    };

    it('renders form', async () => {
        const {screen, onSuccess, onError, onCancel} = myRender();

        const textarea = screen.getByPlaceholderText(__('Enter text for this card')) as HTMLTextAreaElement;
        expect(textarea).toBeInTheDocument();

        userEvent.type(textarea, ' hehehe');
        expect(textarea).toHaveValue('blo bla hehehe');

        const saveButton = screen.getByTitle(__('Save'));
        expect(saveButton).toBeInTheDocument();

        Request.setTestFlagQueue(0);
        userEvent.click(saveButton);
        await waitFor(() => {
            expect(onError).toBeCalled();
        }, {timeout: 100});

        Request.setTestFlagQueue(1);
        userEvent.click(saveButton);
        await waitFor(() => {
            expect(onSuccess).toBeCalled();
        }, {timeout: 100});

        const cancelButton = screen.getByTitle(__('Cancel'));
        expect(cancelButton).toBeInTheDocument();

        userEvent.click(cancelButton);
        expect(onCancel).toBeCalled();
    });
});

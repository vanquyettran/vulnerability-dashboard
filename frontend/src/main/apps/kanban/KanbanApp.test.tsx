import React from 'react';
import {render, waitFor} from '@testing-library/react';
import KanbanApp from './KanbanApp';
import __ from 'main/i18n';
import TestProvider from 'main/TestProvider';
import Request from 'libs/http-request/Request';
import routes from 'main/routing/routes';

describe('<KanbanApp/>', () => {
    const myRender = (repoId: string) => {
        const screen = render(
            <TestProvider url={routes.kanban.getUrl(repoId)} path={routes.kanban.path}>
                <KanbanApp/>
            </TestProvider>,
        );

        return {screen};
    };

    it('renders title ...', () => {
        const {screen} = myRender('a');
        expect(screen.getByText(__('Repo: ...'))).toBeInTheDocument();
        expect(screen.getByText(__('Drag and drop cards to change the status or click on card text to view details'))).toBeInTheDocument();
    });

    it('renders repo name', async () => {
        Request.setTestMockQueue(
            {id: 'a', name: 'Challenge'},
            [
                {id: 'm', title: 'Open', repoId: 'a'},
                {id: 'n', title: 'Confirmed', repoId: 'a'},
                {id: 'p', title: 'False Positive', repoId: 'a'},
                {id: 'q', title: 'Fixed', repoId: 'a'},
            ],
        );

        const {screen} = myRender('a');

        expect(screen.getByRole('progressbar')).toBeInTheDocument();

        await waitFor(() => {
            expect(screen.queryByRole('progressbar')).not.toBeInTheDocument();
            expect(screen.getByText(__('Repo: ::repo', {repo: 'Challenge'})));
        });

        expect(screen.getByText('Open')).toBeInTheDocument();
        expect(screen.getByText('Confirmed')).toBeInTheDocument();
        expect(screen.getByText('False Positive')).toBeInTheDocument();
        expect(screen.getByText('Fixed')).toBeInTheDocument();
    });
});

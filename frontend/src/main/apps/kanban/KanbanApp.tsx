import './KanbanApp.less';
import React, {useEffect} from 'react';
import {useParams} from 'react-router-dom';
import useListData from 'main/store/useListData';
import ListListParcel from 'main/api/list/ListListParcel';
import Request from 'libs/http-request/Request';
import List from 'main/models/interfaces/List';
import RepoReadParcel from 'main/api/repo/RepoReadParcel';
import Lane from './lane/Lane';
import {DragDropContext, DropResult, ResponderProvided} from 'react-beautiful-dnd';
import useCardData from 'main/store/useCardData';
import CardUpdateParcel from 'main/api/card/CardUpdateParcel';
import useRepoActions from 'main/store/useRepoActions';
import useListActions from 'main/store/useListActions';
import useCardActions from 'main/store/useCardActions';

export default function KanbanApp() {
    const {repoId} = useParams() as { repoId: string };

    const repoMani = useRepoActions();

    const listData = useListData();
    const listMani = useListActions();

    const cardData = useCardData();
    const cardMani = useCardActions();

    useEffect(() => {
        const parcel = new RepoReadParcel(repoId);
        repoMani.ajaxRead.run(parcel);

        return () => {
            Request.destroy(parcel);
        };
    }, [repoId]);

    useEffect(() => {
        const parcel = new ListListParcel(repoId);
        listMani.ajaxList.run(parcel);

        return () => {
            Request.destroy(parcel);
        };
    }, [repoId]);

    console.log('re-render Kanban');

    // const reorder = (list: any[], startIndex: number, endIndex: number) => {
    //     const result = Array.from(list);
    //     const [removed] = result.splice(startIndex, 1);
    //     result.splice(endIndex, 0, removed);
    //
    //     return result;
    // };

    const onDragEnd = (result: DropResult, provided: ResponderProvided) => {
        console.log(result, provided);
        const { source, destination } = result;
        if (destination === undefined) {
            return;
        }

        if (destination.droppableId === source.droppableId) {
            if (destination.index === source.index) {
                return;
            }

            const list = listData.findById(source.droppableId);
            if (list === undefined) {
                return;
            }

            const cards = cardData.entities.filter(card => card.listId === list.id);

            const card1 = cards[source.index];
            const card2 = cards[destination.index];
            if (card1 !== undefined && card2 !== undefined) {
                // cardData.reorder(card1.id, cardData.allIds.indexOf(card2.id));
                cardMani.swap(card1.id, card2.id);
            }
        } else {
            // const startColumn = [...state.widgets[source.droppableId]];
            // const finishColumn = [...state.widgets[destination.droppableId]];
            // const [removed] = startColumn.splice(source.index, 1);
            // finishColumn.splice(destination.index, 0, removed);
            //
            // const updateState = {
            //     widgets: {
            //         ...state.widgets,
            //         [source.droppableId]: startColumn,
            //         [destination.droppableId]: finishColumn
            //     }
            // };
            // setState(updateState);

            const list1 = listData.findById(source.droppableId);
            const list2 = listData.findById(destination.droppableId);
            if (list1 === undefined || list2 === undefined) {
                return;
            }

            const cards1 = cardData.entities.filter(card => card.listId === list1.id);
            const cards2 = cardData.entities.filter(card => card.listId === list2.id);

            const card1 = cards1[source.index];

            if (card1 === undefined) {
                console.error({cards1, cards2, source, destination});
                return;
            }

            cardMani.ajaxDraftUpdate.run(new CardUpdateParcel({...card1, listId: destination.droppableId}));

            if (cards2.length > 0) {
                const card2 = cards2[destination.index];
                if (card2 !== undefined) {
                    cardMani.reorder(card1.id, cardData.allIds.indexOf(card2.id));
                } else {
                    cardMani.reorder(card1.id, cardData.allIds.indexOf(cards2[destination.index - 1].id) + 1);
                }
            }
        }
    };

    return (
        <div className="KanbanApp">
            <DragDropContext onDragEnd={onDragEnd}>
                <ul>
                    {
                        listData.entities
                            .filter(list => list.repoId === repoId)
                            .map((list: List) => (
                                <li key={list.id}>
                                    <Lane list={list}/>
                                </li>
                            ))
                    }
                </ul>
            </DragDropContext>
        </div>
    );
}

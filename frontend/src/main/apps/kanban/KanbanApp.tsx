import './KanbanApp.less';
import React, {useEffect} from 'react';
import {useParams} from 'react-router-dom';
import useListData from 'main/store/list/useListData';
import ListListParcel from 'main/api/list/ListListParcel';
import Request from 'libs/http-request/Request';
import List from 'main/models/interfaces/List';
import RepoReadParcel from 'main/api/repo/RepoReadParcel';
import Lane from './lane/Lane';
import {DragDropContext, DropResult} from 'react-beautiful-dnd';
import useCardData from 'main/store/card/useCardData';
import useRepoActions from 'main/store/repo/useRepoActions';
import useListActions from 'main/store/list/useListActions';
import useCardActions from 'main/store/card/useCardActions';
import CardMigrateParcel from 'main/api/card/CardMigrateParcel';
import useRepoData from 'main/store/repo/useRepoData';

export default function KanbanApp() {
    const {repoId} = useParams() as {repoId: string};

    const repoData = useRepoData();
    const repoActions = useRepoActions();

    const listData = useListData();
    const listActions = useListActions();

    const cardData = useCardData();
    const cardActions = useCardActions();

    useEffect(() => {
        const parcel = new RepoReadParcel(repoId);
        repoActions.ajaxRead.run(parcel);

        return () => {
            Request.destroy(parcel);
        };
    }, [repoId]);

    useEffect(() => {
        const parcel = new ListListParcel(repoId);
        listActions.ajaxList.run(parcel);

        return () => {
            Request.destroy(parcel);
        };
    }, [repoId]);

    console.log('re-render Kanban');

    const onDragEnd = (result: DropResult) => {
        const {source, destination} = result;

        if (destination === undefined) {
            return;
        }

        if (destination.droppableId === source.droppableId &&
            destination.index === source.index
        ) {
            return;
        }

        const sourceList = listData.findById(source.droppableId);
        if (sourceList === undefined) {
            return;
        }

        const cardsInSourceList = cardData.entities.filter(
            card => card.listId === sourceList.id
        );
        const card = cardsInSourceList[source.index];
        if (card === undefined) {
            return;
        }

        cardActions.ajaxDraftMigrate.run(
            new CardMigrateParcel({
                card: {...card, listId: destination.droppableId},
                posInList: destination.index,
            }),
        );
    };

    const repo = repoData.findById(repoId);

    return (
        <div className="KanbanApp">
            <h1>
                {
                    repo !== undefined &&
                    repo.name
                }
            </h1>
            <DragDropContext onDragEnd={onDragEnd}>
                <ul>
                    {
                        listData.entities
                            .filter(list => list.repoId === repoId)
                            .map((list: List) => (
                                <li key={list.id}>
                                    <Lane list={list}/>
                                </li>
                            ))
                    }
                </ul>
            </DragDropContext>
        </div>
    );
}

import './KanbanApp.less';
import React, {useContext, useEffect} from 'react';
import {useParams} from 'react-router-dom';
import useListData from 'main/store/list/useListData';
import ListListParcel from 'main/api/list/ListListParcel';
import Request from 'libs/http-request/Request';
import RepoReadParcel from 'main/api/repo/RepoReadParcel';
import useRepoActions from 'main/store/repo/useRepoActions';
import useListActions from 'main/store/list/useListActions';
import useRepoData from 'main/store/repo/useRepoData';
import ErrorContext from 'main/contexts/error/ErrorContext';
import Popup from 'uikit/components/popup/Popup';
import CardDetailedView from 'main/apps/kanban/card-detailed-view/CardDetailedView';
import __ from 'main/i18n';
import AppHeading from 'main/components/app-heading/AppHeading';
import Board from 'main/apps/kanban/board/Board';
import {useRecoilState} from 'recoil';
import {selectedCardInfoState} from 'main/apps/kanban/kanbanStates';

export default function KanbanApp() {
    const errorContext = useContext(ErrorContext);

    const {repoId} = useParams() as {repoId: string};

    const repoData = useRepoData();
    const repoActions = useRepoActions();

    const listData = useListData();
    const listActions = useListActions();

    // Read repo by ID
    useEffect(() => {
        const parcel = new RepoReadParcel(repoId);
        repoActions.ajaxRead.run(parcel);

        return () => {
            Request.destroy(parcel);
        };
    }, [repoId]);

    // Handle repo reading error, such as 404
    useEffect(() => {
        if (repoActions.ajaxRead.state.error !== null) {
            errorContext.setErrorByHttpCode(repoActions.ajaxRead.state.error.httpCode);
        }
    }, [repoActions.ajaxRead.state.error]);

    // Fetch lists by repo ID
    useEffect(() => {
        const parcel = new ListListParcel(repoId);
        listActions.ajaxList.run(parcel);

        return () => {
            Request.destroy(parcel);
        };
    }, [repoId]);

    const repo = repoData.findById(repoId);

    const [selectedCardInfo, setSelectedCardInfo] = useRecoilState(selectedCardInfoState);

    return (
        <div className="KanbanApp">
            <AppHeading
                title={repo ? __('Repo: ::repo', {repo: repo.name}) : __('Repo: ...')}
                description={__('Drag and drop cards to change the status')}
                inProgress={repoActions.ajaxRead.state.inProgress || listActions.ajaxList.state.inProgress}
            />
            <Board lists={listData.entities.filter(list => list.repoId === repoId)}/>
            {selectedCardInfo !== null && (
                <Popup
                    onClose={() => {
                        setSelectedCardInfo(null);
                    }}
                >
                    <CardDetailedView
                        cardId={selectedCardInfo.cardId}
                        listId={selectedCardInfo.listId}
                        onClose={() => {
                            setSelectedCardInfo(null);
                        }}
                    />
                </Popup>
            )}
        </div>
    );
}

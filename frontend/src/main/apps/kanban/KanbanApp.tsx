import './KanbanApp.less';
import React, {useContext, useEffect, useState} from 'react';
import {useParams} from 'react-router-dom';
import useListData from 'main/store/list/useListData';
import ListListParcel from 'main/api/list/ListListParcel';
import Request from 'libs/http-request/Request';
import IList from 'main/models/interfaces/IList';
import RepoReadParcel from 'main/api/repo/RepoReadParcel';
import Lane from './lane/Lane';
import {DragDropContext, DragStart, DropResult} from 'react-beautiful-dnd';
import useCardData from 'main/store/card/useCardData';
import useRepoActions from 'main/store/repo/useRepoActions';
import useListActions from 'main/store/list/useListActions';
import useCardActions from 'main/store/card/useCardActions';
import CardMoveParcel from 'main/api/card/CardMoveParcel';
import useRepoData from 'main/store/repo/useRepoData';
import ErrorContext from 'main/contexts/error/ErrorContext';
import Spinner from 'uikit/components/spinner/Spinner';
import ICard from 'main/models/interfaces/ICard';
import Popup from 'uikit/components/popup/Popup';
import CardDetailedView from 'main/apps/kanban/card-detailed-view/CardDetailedView';
import canMoveCard from 'main/models/utils/canMoveCard';

export default function KanbanApp() {
    const errorContext = useContext(ErrorContext);

    const {repoId} = useParams() as {repoId: string};

    const repoData = useRepoData();
    const repoActions = useRepoActions();

    const listData = useListData();
    const listActions = useListActions();

    const cardData = useCardData();
    const cardActions = useCardActions();

    // Read repo by ID
    useEffect(() => {
        const parcel = new RepoReadParcel(repoId);
        repoActions.ajaxRead.run(parcel);

        return () => {
            Request.destroy(parcel);
        };
    }, [repoId]);

    // Handle repo reading error, such as 404
    useEffect(() => {
        if (repoActions.ajaxRead.state.error !== null) {
            errorContext.setErrorByHttpCode(repoActions.ajaxRead.state.error.httpCode);
        }
    }, [repoActions.ajaxRead.state.error]);

    // Fetch lists by repo ID
    useEffect(() => {
        const parcel = new ListListParcel(repoId);
        listActions.ajaxList.run(parcel);

        return () => {
            Request.destroy(parcel);
        };
    }, [repoId]);

    console.log('re-render Kanban');

    const [draggingSourceListId, setDraggingSourceListId] = useState<IList['id'] | null>(null);

    const onDragStart = (initial: DragStart) => {
        setDraggingSourceListId(initial.source.droppableId);
    };

    const onDragEnd = (result: DropResult) => {
        const {source, destination} = result;

        setDraggingSourceListId(null);

        if (!destination) {
            return;
        }

        if (destination.droppableId === source.droppableId &&
            destination.index === source.index
        ) {
            return;
        }

        const sourceList = listData.findById(source.droppableId);
        if (sourceList === undefined) {
            return;
        }
        const destinationList = listData.findById(destination.droppableId);
        if (destinationList === undefined) {
            return;
        }

        if (!canMoveCard(sourceList, destinationList)) {
            return;
        }

        const cardsInSourceList = cardData.entities.filter(
            card => card.listId === sourceList.id,
        );
        const card = cardsInSourceList[source.index];
        if (card === undefined) {
            return;
        }

        cardActions.ajaxDraftMove.run(
            new CardMoveParcel({
                card: {...card, listId: destination.droppableId},
                posInList: destination.index,
            }),
        );
    };

    const repo = repoData.findById(repoId);

    const [selectedCardId, setSelectedCardId] = useState<ICard['id'] | null>(null);

    const draggingSourceList: IList | undefined = (() => {
        if (draggingSourceListId === null) {
            return undefined;
        }

        return listData.findById(draggingSourceListId);
    })();

    return (
        <div className="KanbanApp">
            <h1>
                {
                    repo !== undefined &&
                    <span>{repo.name}</span>
                }
                {
                    repoActions.ajaxRead.state.inProgress &&
                    <Spinner/>
                }
            </h1>
            <DragDropContext onDragStart={onDragStart} onDragEnd={onDragEnd}>
                <ul>
                    {
                        listData.entities
                            .filter(list => list.repoId === repoId)
                            .map((list: IList) => (
                                <li key={list.id}>
                                    <Lane
                                        list={list}
                                        isDropDisabled={
                                            draggingSourceList !== undefined &&
                                            !canMoveCard(draggingSourceList, list)
                                        }
                                        setSelectedCardId={setSelectedCardId}
                                    />
                                </li>
                            ))
                    }
                </ul>
            </DragDropContext>
            {selectedCardId !== null && (() => {
                const selectedCard = cardData.findById(selectedCardId);
                return selectedCard !== undefined ? (
                    <Popup
                        close={() => {
                            setSelectedCardId(null);
                        }}
                    >
                        <CardDetailedView
                            card={selectedCard}
                        />
                    </Popup>
                ) : null;
            })()}
        </div>
    );
}

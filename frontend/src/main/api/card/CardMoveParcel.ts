import AbstractParcel from "../AbstractParcel";
import ResponseResult from 'libs/http-request/ResponseResult';
import ResponseError from 'libs/http-request/ResponseError';
import ICard from 'main/models/interfaces/ICard';
import {CardMoveParams} from 'main/store/interfaces';
import IList from 'main/models/interfaces/IList';
import validateCardMove from 'main/models/validation/validateCardMove';

export default class CardMoveParcel extends AbstractParcel<CardMoveParams> {
    private readonly cardId: ICard['id'];
    private readonly fromList: IList;
    private readonly toList: IList;
    private readonly toPosInList: number;
    private readonly timestamp: string;

    constructor({cardId, fromList, toList, toPosInList}: Omit<CardMoveParams, 'timestamp'>) {
        super();

        this.cardId = cardId;
        this.fromList = fromList;
        this.toList = toList;
        this.toPosInList = toPosInList;
        this.timestamp = new Date().toISOString();

        // This API was not supported by the backend
        // Make a mockup and request later
        this.setMode('MockSuccessFast');

        // Uncomment the following line to see how fallback work
        // this.setMode('MockFailureFast');

        // Validate card, if error, this parcel will be rejected by Request.add method
        this.setPayloadValidationMessage(validateCardMove(fromList, toList));

        // Set expected response data, used for background tasks
        this.setExpectedResponseData({
            cardId,
            fromList,
            toList,
            toPosInList,
            timestamp: this.timestamp,
        });

        // Used for test
        this.setMockResponseData({
            cardId,
            fromList,
            toList,
            toPosInList,
            timestamp: this.timestamp,
        });
    }

    parseResponseError(response: any, xhr: XMLHttpRequest) {
        return new ResponseError(response?.message, xhr.status);
    }

    parseResponseResult(response: any) {
        return new ResponseResult({
            cardId: this.cardId,
            fromList: this.fromList,
            toList: this.toList,
            toPosInList: this.toPosInList,
            timestamp: this.timestamp,
        });
    }
}

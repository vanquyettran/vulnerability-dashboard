import AbstractParcel from "../AbstractParcel";
import ResponseResult from 'libs/http-request/ResponseResult';
import ResponseError from 'libs/http-request/ResponseError';
import Card from 'main/models/interfaces/Card';

export interface CardMoveParams {
    card: Card,
    posInList: number,
}

export default class CardMoveParcel extends AbstractParcel<CardMoveParams> {
    private readonly card: Card;
    private readonly posInList: number;

    constructor({card, posInList}: CardMoveParams) {
        super();

        this.card = card;
        this.posInList = posInList;

        // This API was not supported by the backend
        // Make a mockup and request later
        this.setMode('MockSuccessDelay');

        // Uncomment the following line to see how fallback work
        // this.setMode('MockFailureDelay');

        // Used for draft update
        this.setExpectedResponseData({card, posInList});
    }

    parseResponseError(response: any, xhr: XMLHttpRequest) {
        return new ResponseError(response?.message, xhr.status);
    }

    parseResponseResult(response: any) {
        return new ResponseResult({card: this.card, posInList: this.posInList});
    }
}

import ResponseResult from "./ResponseResult";
import ResponseError from "./ResponseError";

export default abstract class Parcel {
    public fakeMode: any;
    public endpoint: string;
    public requestMethod: string;
    public requestHeaders: {};
    public requestBody: null;
    public queryParams: {};
    public responseContentFormat: string;

    protected constructor() {
        this.fakeMode = null;
        this.endpoint = '';
        this.requestMethod = '';
        this.requestHeaders = {};
        this.requestBody = null;
        this.queryParams = {};
        this.responseContentFormat = '';
    }

    public setEndpoint(endpoint: string): void {
        this.endpoint = endpoint;
    }

    public setRequestMethod(method: string): void {
        this.requestMethod = method;
    }

    public setRequestHeader(name: string, value: string | number) {
        this.requestHeaders[name] = value;
    }

    public setQueryParam(name: string, value: string | number): void {
        this.queryParams[name] = value;
    }

    public setRequestBody(body: any): void {
        this.requestBody = body;
    }

    public setResponseContentFormat(responseContentFormat: string): void {
        this.responseContentFormat = responseContentFormat;
    }

    public setFakeMode(fakeMode) {
        this.fakeMode = fakeMode;
    }

    public getEndpoint() {
        return this.endpoint;
    }

    public getQueryString(): string {
        let result = '';
        for (let name in this.queryParams) {
            if (!this.queryParams.hasOwnProperty(name)) {
                continue;
            }
            const value = this.queryParams[name];

            if (result.length > 0) {
                result += '&';
            }
            result += encodeURIComponent(name);
            result += '=';
            result += encodeURIComponent('string' === typeof value ? value : JSON.stringify(value));
        }

        return result;
    }

    public getRequestUrl(): string {
        const endpoint = this.getEndpoint();
        const queryString = this.getQueryString();

        if (queryString !== '') {
            return endpoint + '?' + queryString;
        }

        return endpoint;
    }

    public getRequestMethod() {
        return this.requestMethod;
    }

    public getRequestHeaders() {
        return this.requestHeaders;
    }

    public getRequestBody() {
        return this.requestBody;
    }

    public getResponseContentFormat() {
        return this.responseContentFormat;
    }

    public getFakeMode() {
        return this.fakeMode;
    }

    public onResponse(response: any): any {
    }

    public parseResponse(response: any): any {
        return response;
    }

    abstract parseResponseResult(response: any): ResponseResult;

    abstract parseResponseError(response: any): ResponseError;
}

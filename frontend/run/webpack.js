const path = require('path');

const rootDir = path.resolve(__dirname, '../../');
const bundlingDir = path.resolve(__dirname, '../bundling');

const classnameOptions = {
    moduleHashClassPrefix: 'prj-',
    submoduleNameDelimiter: '__', // using to determine if a submodule belongs to a module or not
    getModuleHashKey(resourcePath) {
        // ./Demo.js and ./Demo.less --> the same key
        return path.join(
            path.dirname(resourcePath),
            path.basename(resourcePath, path.extname(resourcePath))
        );
    },
};

function getTsLoaders() {
    return [
        ...getJsLoaders(),
        {
            loader: 'ts-loader',
        }
    ]
}

function getJsLoaders() {
    return [
        {
            loader: 'babel-loader',
            options: {
                presets: [
                    '@babel/preset-env',
                ],
                plugins: [
                    "@babel/plugin-transform-react-jsx",
                    [
                        path.resolve(bundlingDir, 'css-classname/babel-plugin-jsx-classname'),
                        classnameOptions
                    ],
                ],
            }
        }
    ];
}

function getLessLoaders() {
    return [
        {
            loader: 'style-loader',
            options: {
                injectType: 'singletonStyleTag',
            }
        },
        'css-loader',
        {
            loader: path.resolve(bundlingDir, 'css-classname/webpack-css-classname-loader'),
            options: classnameOptions
        },
        'less-loader',
    ];
}


module.exports = (env) => {
    return {
        mode: env.development ? 'development' : 'production',
        entry: {
            main: path.resolve(rootDir, 'frontend/src/main/index.tsx'),
        },
        output: {
            path: path.resolve(rootDir, 'public/bundles'),
            filename: '[name].js',
        },
        module: {
            rules: [
                {
                    test: /\.tsx?$/,
                    use: getTsLoaders()
                },
                {
                    test: /\.jsx?$/,
                    use: getJsLoaders()
                },
                {
                    test: /\.less$/,
                    use: getLessLoaders()
                }
            ]
        },
        resolve: {
            extensions: ['.ts', '.tsx', '.js', '.json', '.less'],
            alias: {

            },
        },
        devtool : 'eval-source-map',
    };
};

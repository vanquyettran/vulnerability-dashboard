const fs = require('fs');
const path = require('path');
const webfont = require('webfont').default;
const getOptions = require('../webpack/loader-utils/getOptions');


module.exports = function (source) {
    const {
        placeholder = '/** ICON FONT PLACEHOLDER **/',
        className = 'Icon',
        fontName = 'web-icons',
        formats = ['ttf', 'eot', 'woff', 'woff2'],
        sourcePath,
        outputPath,
        publicPath,
    } = getOptions(this);

    if (!source.includes(placeholder)) {
        return source;
    }

    const callback = this.async();

    webfont({
        fontName: fontName,
        formats: formats,
        files: path.join(sourcePath, '/*.svg').split(path.sep).join('/'),
        fontHeight: 10000,
        normalize: true,
    })
        .then((result) => {
            // Add dependencies for watching
            fs.readdirSync(sourcePath).forEach(file => {
                this.addDependency(path.resolve(sourcePath, file));
            });

            if (!fs.existsSync(outputPath)) {
                fs.mkdirSync(outputPath);
            }

            if (!fs.existsSync(path.resolve(outputPath, fontName))) {
                fs.mkdirSync(path.resolve(outputPath, fontName));
            }

            const resultFormats = [];

            formats.map(ext => {
                if (result.hasOwnProperty(ext)) {
                    fs.writeFileSync(path.resolve(outputPath, fontName, `${fontName}.${ext}`), result[ext]);
                    resultFormats.push(ext);
                }
            });

            const fontCss = composeFontCss({result, resultFormats, fontName, publicPath, className});

            callback(null, source.split(placeholder).join(fontCss));
        })
        .catch((error) => {
            callback(error);
        });
}

function composeFontCss({result, resultFormats, fontName, publicPath, className}) {
    const getPublicUrl = (ext) => {
        return path.join(publicPath, fontName, `${fontName}.${ext}`)
            .split(path.sep).join('/');
    };

    const primarySrc = `url("${getPublicUrl(resultFormats[0])}")`;

    const fallbackSrc = resultFormats.map(ext => {
        return `url("${getPublicUrl(ext)}")`;
    }).join(', ');

    const glyphsBlock = result.glyphsData.map(({metadata}) => {
        const code = metadata.unicode[0].charCodeAt(0).toString(16);
        return `.${className}[aria-valuetext="${metadata.name}"]:before { content: "\\${code}"; }`;
    }).join('\n');

    return `

@font-face {
    font-family: "${fontName}";
    src: ${primarySrc};
    src: ${fallbackSrc};
}

.${className}:before {
    font-family: "${fontName}";
}

${glyphsBlock}

`;
}

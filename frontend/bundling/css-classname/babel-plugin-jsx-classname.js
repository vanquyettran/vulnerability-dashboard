const isExcluded = require('./common-utils/isExcluded');
const hashMap = require('./common-utils/hashMap');


module.exports = function () {

    return {
        visitor: {
            JSXAttribute(path, state) {
                if (path.node.name.name !== 'className') {
                    return;
                }

                if (isExcluded(state.filename, state.opts)) {
                    return;
                }

                const classPrefix = state.opts.classPrefix;
                const moduleClassPrefix = state.opts.moduleClassPrefix;
                const globalClass = state.opts.globalClass;
                const hashClass = hashMap.getValue(state.filename, state.opts);

                const globalAndHash = [globalClass, hashClass].filter(Boolean).join(' ');
                const noChanges = !classPrefix && !moduleClassPrefix && !globalAndHash;

                // Support className Array
                if (noChanges) {
                    path.traverse({
                        JSXExpressionContainer(path1) {
                            if (path1.node !== path.node.value) {
                                return;
                            }

                            path1.traverse({
                                ArrayExpression(path2) {
                                    if (path2.node !== path1.node.expression) {
                                        return;
                                    }

                                    const snippet = path2.getSource();
                                    path2.replaceWithSourceString(
                                        `${snippet}.filter(Boolean).join(' ')`
                                    );
                                    path2.skip();
                                }
                            })
                        },
                    });

                    return;
                }

                // Replace
                path.traverse({
                    StringLiteral(path1) {
                        if (path1.node !== path.node.value) {
                            return;
                        }

                        const snippet = path1.getSource().slice(1, -1);
                        path1.replaceWithSourceString('"' + snippet
                            .split(' ').map(t => t.trim()).filter(Boolean)
                            .map(t => moduleClassPrefix && /^[A-Z]/.test(t) ? moduleClassPrefix + t : t)
                            .map(t => classPrefix ? classPrefix + t : t)
                            .concat(globalAndHash || [])
                            .join(' ') + '"');
                        path1.skip();
                    },
                    JSXExpressionContainer(path1) {
                        if (path1.node !== path.node.value) {
                            return;
                        }

                        path1.traverse({
                            enter(path2) {
                                if (path2.node !== path1.node.expression) {
                                    return;
                                }

                                if (path2.node.type === 'StringLiteral') {
                                    const snippet = path2.getSource().slice(1, -1);
                                    path2.replaceWithSourceString('"' + snippet
                                        .split(' ').map(t => t.trim()).filter(Boolean)
                                        .map(t => moduleClassPrefix && /^[A-Z]/.test(t) ? moduleClassPrefix + t : t)
                                        .map(t => classPrefix ? classPrefix + t : t)
                                        .concat(globalAndHash || [])
                                        .join(' ') + '"');
                                    path2.skip();
                                    return;
                                }

                                if (path2.node.type === 'ArrayExpression') {
                                    const snippet = path2.getSource();
                                    path2.replaceWithSourceString(
                                        `${snippet}.filter(Boolean)`
                                        + (moduleClassPrefix ? `.map(t => /^[A-Z]/.test(t) ? '${moduleClassPrefix}' + t : t)` : '')
                                        + (classPrefix ? `.map(t => '${classPrefix}' + t)` : '')
                                        + (globalAndHash ? `.concat('${globalAndHash}')` : '')
                                        + `.join(' ')`
                                    );
                                    path2.skip();
                                    return;
                                }

                                const snippet = path2.getSource();
                                path2.replaceWithSourceString(`(() => {`
                                    + `let s = (${snippet});`
                                    + `if (s) return s.split(' ').filter(Boolean)`
                                    + (moduleClassPrefix ? `.map(t => /^[A-Z]/.test(t) ? '${moduleClassPrefix}' + t : t)` : '')
                                    + (classPrefix ? `.map(t => '${classPrefix}' + t)` : '')
                                    + (globalAndHash ? `.concat('${globalAndHash}')` : '')
                                    + `.join(' '); `
                                    + (globalAndHash ? `return '${globalAndHash}';` : '')
                                    + `})()`
                                );
                                path2.skip();
                            }
                        })
                    },
                });
            }
        }
    };
}

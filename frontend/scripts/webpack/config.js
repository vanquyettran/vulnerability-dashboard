const path = require('path');
const {classnameOptions} = require('../_shared');

const rootDir = path.resolve(__dirname, '../../../');
const bundlingDir = path.resolve(rootDir, 'frontend/scripts/bundling');
const srcDir = path.resolve(rootDir, 'frontend/src');
const outputDir = path.resolve(rootDir, 'public/bundles');
const outputPublicPath = '/bundles/';

function getTsLoaders() {
    return [
        ...getJsLoaders(),
        {
            loader: 'ts-loader',
        },
    ];
}

function getJsLoaders() {
    return [
        {
            loader: 'babel-loader',
            options: {
                presets: [
                    '@babel/preset-env',
                ],
                plugins: [
                    '@babel/plugin-transform-react-jsx',
                    [
                        path.resolve(bundlingDir, 'css-classname/babel-plugin-jsx-classname'),
                        classnameOptions,
                    ],
                ],
            },
        },
    ];
}

function getLessLoaders() {
    return [
        {
            loader: 'style-loader',
            options: {
                injectType: 'singletonStyleTag',
            },
        },
        'css-loader',
        {
            loader: path.resolve(bundlingDir, 'css-classname/webpack-css-classname-loader'),
            options: classnameOptions,
        },
        'less-loader',

        // icon-font-loader relies on a comment as the placeholder to put some font CSS
        // Run this loader first to make sure that comment was not deleted by other loaders
        {
            loader: path.resolve(bundlingDir, 'icon-font/webpack-icon-font-loader'),
            options: {
                sourcePath: path.resolve(srcDir, 'uikit/icons/'),
                outputPath: outputDir,
                publicPath: outputPublicPath,
            },
        },
    ];
}

module.exports = (env) => {
    return {
        mode: env.development ? 'development' : 'production',
        entry: {
            main: path.resolve(srcDir, 'main/index.tsx'),
        },
        output: {
            path: outputDir,
            publicPath: outputPublicPath,
            filename: '[name].js',
        },
        module: {
            rules: [
                {
                    test: /\.tsx?$/,
                    use: getTsLoaders(),
                },
                {
                    test: /\.jsx?$/,
                    use: getJsLoaders(),
                },
                {
                    test: /\.less$/,
                    use: getLessLoaders(),
                },
            ],
        },
        resolve: {
            extensions: ['.ts', '.tsx', '.js', '.json', '.less'],
            alias: {
                main: path.resolve(srcDir, 'main'),
                uikit: path.resolve(srcDir, 'uikit'),
                libs: path.resolve(srcDir, 'libs'),
                theme: path.resolve(srcDir, 'theme'),
            },
        },
        devtool: 'eval-source-map',
    };
};
